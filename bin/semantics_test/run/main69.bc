namespace samples {
	interface Callable {
		public:
		def call() -> Int;
	}
	class ImplA : Callable {
		public:
		def new() {
		}

		def call() -> Int {
			return 0;
		}
	}
	class ImplB : Callable {
		public:
		def new() {
		}

		def call() -> Int {
			return 1;
		}
	}
	class ImplC : Callable {
		public:
		def new() {
		}

		def call() -> Int {
			return 2;
		}
	}
}
samples::Callable va = new samples::ImplA();
samples::Callable vb = new samples::ImplB();
samples::Callable vc = new samples::ImplC();
assert va.call() == 0;
assert vb.call() == 1;
assert vc.call() == 2;
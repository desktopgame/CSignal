namespace beacon::lang {
	class StringBuilder {
		public:
		def new() {
			this.chars = new Vector[Char]();
		}

		def append(Char ch) -> StringBuilder {
			chars.push(ch);
			return this;
		}

		def append(String s) -> StringBuilder {
			var iter = s.iterate();
			while(iter.moveNext()) {
				append(iter.current());
			}
			return this;
		}

		def append(Object o) -> StringBuilder {
			return append(o.toString());
		}

		def remove(Int offset) -> StringBuilder {
			chars.remove(offset);
			return this;
		}

		def remove(Int offset, Int len) -> StringBuilder {
			Int p = 0;
			while(p < len) {
				remove(offset + len - p);
				p = p + 1;
			}
			return this;
		}

		def clear() -> Void {
			this.chars = new Vector[Char]();
		}

		def toString() -> String {
			return new String(chars.toArray());
		}

		operator <<(Char s) -> StringBuilder {
			return append(s);
		}

		operator <<(String s) -> StringBuilder {
			return append(s);
		}

		private:
		Vector[Char] chars;
	}
}
namespace beacon::unsafe {
	class File {
		private:
		def new(String filename, String mode) {
			nativeInit(filename, mode);
		}

		public:
		def static open(String filename, String mode) {
			return new File(filename, mode);
		}

		def close() -> Void {
			this.nativeClose();
		}

		def putc(Char c) -> Void {
			nativePut(c);
		}

		def puts(String s) -> Void {
			var offs = 0;
			while(offs < s.length()) {
				putc(s.charAt(offs));
				offs += 1;
			}
		}

		def getc() -> Char {
			return nativeGet();
		}

		def gets() -> String {
			var buf = new StringBuffer();
			while(true) {
				var ch = getc();
				if(ch == '\n') { break; }
				buf.append(ch);
			}
			return buf.toString();
		}

		private:
		def static native nativeInit(String filename, String mode) -> Void;

		def static native nativePut(Char c) -> Void;

		def static native nativeGet() -> Char;

		def static native nativeGetStdin() -> File;

		def static native nativeGetStdout() -> File;

		def native native nativeClose() -> Void;
	}
}
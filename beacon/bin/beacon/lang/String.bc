import "beacon/lang/Array"

namespace beacon::lang {
	class String : Iterable[Char] {
		private:
		Array[Char] charArray;

		public:
		def new(Array[Char] source) {
			this.charArray = new Array[Char](source.length());
			Array.copy[Char](source, 0, this.charArray, 0, source.length());
			this.nativeInit();
		}

		def charAt(Int index) -> Char {
			return this.charArray.get(index) as Char;
		}

		def substr(Int offs, Int len) -> String {
			return new String(this.charArray.sub(offs, len));
		}

		def length() -> Int {
			return this.charArray.length();
		}

		def concat(String other) -> String {
			var arr = new Array[Char](this.length() + other.length());
			var offs = 0;
			while(offs < this.length()) {
				arr.set(offs, this.charAt(offs));
				offs += 1;
			}
			while(offs - this.length() < other.length()) {
				arr.set(offs, other.charAt(offs - this.length()));
				offs += 1;
			}
			return new String(arr);
		}

		def iterate() -> Iterator[Char] {
			return new ArrayIterator[Char](charArray);
		}
		private:
		def native nativeInit() -> Void;
	}
}
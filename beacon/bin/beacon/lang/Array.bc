import "beacon/lang/Exception"
import "beacon/lang/String"
import "beacon/lang/Iterable"
import "beacon/lang/ArrayIterator"

namespace beacon::lang {
	class Array[T] : Iterable[T] {
		private:
		Int length;

		public:
		def new(Int length) {
			this.length = length;
			nativeInit();
		}

		def length() -> Int {
			return length;
		}

		def set(Int index, T v) -> Void {
			checkRange(index);
			nativeSet(index, v as Object);
		}

		def sub(Int offs, Int len) -> Array[T] {
			var range = new Array[T](len);
			var ptr = offs;

			while(ptr < offs + len) {
				var a = ptr-offs;
				range.set(a, get(ptr));
				ptr = ptr + 1;
			}
			return range;
		}

		def get(Int index) -> T {
			checkRange(index);
			return nativeGet(index) as T;
		}

		def static copy[T](Array[T] src, Int srcOffset, Array[T] dst, Int dstOffset, Int length) -> Void {
			Array.nativeCopy[T](src, srcOffset, dst, dstOffset, length);
		}

		def iterate() -> Iterator[T] {
			return new ArrayIterator[T](this);
		}

		private:
		def checkRange(Int index) -> Void {
			if(index < 0 || index >= length) {
				throw new Exception("Out Of Range");
			}
		}
		def native nativeInit() -> Void;
		def native nativeSet(Int index, Object v) -> Void;
		def native nativeGet(Int index) -> Object;
		def static native nativeCopy[T](Array[T] src, Int srcOffset, Array[T] dst, Int dstOffset, Int length) -> Void;
	}
}
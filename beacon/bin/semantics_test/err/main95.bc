//https://ja.wikipedia.org/wiki/%E6%93%8D%E8%BB%8A%E5%A0%B4%E3%82%A2%E3%83%AB%E3%82%B4%E3%83%AA%E3%82%BA%E3%83%A0
namespace err95 {
	class Scanner {
		public:
		property String source {
			private defset;
			defget;
		}

		property Int offset {
			defset;
			defget;
		}

		def new(String source) {
			this.source = source;
			this.offset = 0;
		}

		def ready() -> Bool {
			return offset < source.length();
		}

		def ungetc() -> Void {
			offset -= 1;
		}

		def getc() -> Char {
			var ret = source.charAt(offset);
			offset += 1;
			return ret;
		}
	}
	enum TokenId {
		Value,
		Add,
		Sub,
		Mul,
		Div,
		Mod,
		LBrace,
		RBrace,
		Space,
		Undef,
	}
	enum AssocType {
		Left,
		Right,
		Undef,
	}
	class Token {
		public:
		def new(Int id, String source) {
			this.id = id;
			this.source = source;
		}

		property Int id { private defset; defget; }
		property String source { private defset; defget; }
	}
	class Tokenizer {
		public:
		def new(String source) {
			this.scanner = new Scanner(source);
		}

		def lex() -> Vector[Token] {
			scanner.offset = 0;
			var ret = new Vector[Token]();
			while(scanner.ready()) {
				var c = scanner.getc();
				if(c.isDigit()) {
					var buf = new StringBuilder();
					while(c.isDigit()) {
						buf << c;
						if(!(scanner.ready())) { break; }
						c = scanner.getc();
					}
					if((scanner.ready())) {
						scanner.ungetc();
					}
					ret << new Token(TokenId.Value, buf.toString());
				} elif (c == '+') {
					ret << new Token(TokenId.Add, "+");
				} elif (c == '-') {
					ret << new Token(TokenId.Sub, "-");
				} elif (c == '*') {
					ret << new Token(TokenId.Mul, "*");
				} elif (c == '/') {
					ret << new Token(TokenId.Div, "/");
				} elif (c == '%') {
					ret << new Token(TokenId.Div, "%");
				} elif (c == '(') {
					ret << new Token(TokenId.LBrace, "(");
				} elif (c == ')') {
					ret << new Token(TokenId.RBrace, ")");
				} elif (c == ' ') {
					ret << new Token(TokenId.Space, " ");
				} else {
					ret << new Token(TokenId.Undef, "?");
				}
			}
		}

		private:
		Scanner scanner;
	}
	//Node
	interface Node {
		public:
		def eval() -> Int;
	}
	class ValueNode : Node {
		public:
		def new(Int value) {
			this.value = value;
		}

		def eval() -> Int {
			return value;
		}

		private:
		Int value;
	}
	interface Operator {
		public:
		def getAssocType() -> Int;
		def getPriority() -> Int;
	}
	abstract class BinaryOperatorNode : Node, Operator {
		public:
		def new(Node left, Node right) {
			this.left = left;
			this.right = right;
		}

		property Node left {
			private defset;
			defget;
		}
		property Node right {
			private defset;
			defget;
		}
	}
	abstract class UnaryOperatorNode : Node {
		public:
		def new(Node a) {
			this.a = a;
		}

		property Node a {
			private defset;
			defget;
		}
	}
	//operator
	class AdditiveOperator : BinaryOperatorNode {
		public:
		def new(Node left, Node right) : super(left, right) {
		}

		def eval() -> Int {
			return left.eval() + right.eval();
		}
	}
	class SubtractOperator : BinaryOperatorNode {
		public:
		def new(Node left, Node right) : super(left, right) {
		}

		def eval() -> Int {
			return left.eval() - right.eval();
		}
	}
	class MultiplyOperator : BinaryOperatorNode {
		public:
		def new(Node left, Node right) : super(left, right) {
		}

		def eval() -> Int {
			return left.eval() * right.eval();
		}
	}
	class DivideOperator : BinaryOperatorNode {
		public:
		def new(Node left, Node right) : super(left, right) {
		}

		def eval() -> Int {
			return left.eval() / right.eval();
		}
	}
	class ModOperator : BinaryOperatorNode {
		public:
		def new(Node left, Node right) : super(left, right) {
		}

		def eval() -> Int {
			return left.eval() % right.eval();
		}
	}
	class NegativeOperator : UnaryOperatorNode {
		public:
		def new(Node a) : super(a) {
		}

		def eval() -> Int {
			return -(a.eval());
		}
	}
	class CalcUtility {
		public:
		def static tokenToAssoc(Int id) -> Int {
			if(id == TokenId.Add) {
				return AssocType.Left;
			} elif(id == TokenId.Sub) {
				return AssocType.Left;
			} elif(id == TokenId.Mul) {
				return AssocType.Left;
			} elif(id == TokenId.Div) {
				return AssocType.Left;
			} elif(id == TokenId.Mod) {
				return AssocType.Left;
			} else {
				return AssocType.Undef;
			}
		}

		def static tokenToPriority(Int id) -> Int {
			if(id == TokenId.Add) {
				return 2;
			} elif(id == TokenId.Sub) {
				return 2;
			} elif(id == TokenId.Mul) {
				return 3;
			} elif(id == TokenId.Div) {
				return 3;
			} elif(id == TokenId.Mod) {
				return 3;
			} else {
				return -1;
			}
		}

		def static tokenToBiOp(Int id) -> BinaryOperatorNode {
			if(id == TokenId.Add) {
				return new AdditiveOperator();
			} elif(id == TokenId.Sub) {
				return new SubtractOperator();
			} elif(id == TokenId.Mul) {
				return new MultiplyOperator();
			} elif(id == TokenId.Div) {
				return new DivideOperator();
			} elif(id == TokenId.Mod) {
				return new ModOperator();
			} else {
				return null;
			}
		}
		private:
		def new() { }
	}
}
var output = new Vector[Node]();
var stack = new Vector[Node]();
var line = Console.readLine();
var tokenizer = new err95::Tokenizer(line);
var tokens = tokenizer.lex();
var iter = tokens.iterate();
while(iter.moveNext()) {
	var e = iter.current();
	
}
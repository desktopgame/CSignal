require "beacon/lang/Array"

namespace beacon::lang {
	class String : Iterable[Char] {
		private:
		Array[Char] charArray;

		public:
		def new(Array[Char] source) {
			this.charArray = new Array[Char](source.length());
			Array.copy[Char](source, 0, this.charArray, 0, source.length());
			this.nativeInit();
		}

		def charAt(Int index) -> Char {
			return this.charArray.get(index);
		}

		def substr(Int offs, Int len) -> String {
			return new String(this.charArray.sub(offs, len));
		}

		def length() -> Int {
			return this.charArray.length();
		}

		def split(Char c) -> Vector[String] {
			var offs = 0;
			var buff = new StringBuilder();
			var vec = new Vector[String]();
			while(offs < length()) {
				var ce = charAt(offs);
				if(ce == c) {
					vec << buff.toString();
					buff.clear();
				} else {
					buff << ce;
				}
				offs += 1;
			}
			vec << buff.toString();
			return vec;
		}

		def concat(String other) -> String {
			var arr = new Array[Char](this.length() + other.length());
			var offs = 0;
			while(offs < this.length()) {
				arr.set(offs, this.charAt(offs));
				offs += 1;
			}
			while(offs - this.length() < other.length()) {
				arr.set(offs, other.charAt(offs - this.length()));
				offs += 1;
			}
			return new String(arr);
		}

		def toInt() -> Int {
			//http://edu.clipper.co.jp/pg-2-28.html
			//read sign
			var signc = charArray.get(0);
			var signi = 0;
			if(signc == '+') {
				signi = 1;
			} elif(signc == '-') {
				signi = -1;
			}
			//read digit
			var index = signi.abs();
			var n = 0;
			while(index < charArray.length()) {
				var c = charArray.get(index);
				if(c.isDigit()) {
					n = 10 * n + (c.toInt() - '0'.toInt());
				} else {
					break;
				}
				index += 1;
			}
			if(signi == 0) {
				return n;
			}
			return n * signi;
		}

		def iterate() -> Iterator[Char] {
			var offset = 0;
			while(offset < this.length()) {
				yield return this.charAt(offset);
				offset += 1;
			}
		}
		private:
		def native nativeInit() -> Void;
	}
}
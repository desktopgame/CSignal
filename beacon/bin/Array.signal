import "Exception"
import "String"
import "Iterable"
import "ArrayIterator"

namespace signal.lang {
	/**
	 * �z���\������N���X�ł�.
	 * �v�f�� signal::lang::Object �ň����܂��B
	 */
	class Array<|T|> : Iterable<|T|> {
		private:
		Int length;

		public:
		ctor new(Int length) {
			this.length = length;
			nativeInit();
		}

		def length() -> Int {
			return length;
		}

		def set(Int index, T v) -> Void {
			checkRange(index);
			nativeSet(index, v);
		}

		def sub(Int offs, Int len) -> Array<|T|> {
			var range = new Array<|T|>(len);
			var ptr = offs;

			while(ptr < offs + len) {
				var a = ptr-offs;
				range.set(a, get(ptr));
				ptr = ptr + 1;
			}
			return range;
		}

		def get(Int index) -> T {
			checkRange(index);
			return nativeGet(index) as T;
		}

		static def copy<|T|>(Array<|T|> src, Int srcOffset, Array<|T|> dst, Int dstOffset, Int length) -> Void {
			Array.nativeCopy(src, srcOffset, dst, dstOffset, length);
		}

		def iterate() -> Iterator<|T|> {
			return new ArrayIterator<|T|>(this);
		}

		private:
		def checkRange(Int index) -> Void {
			if(index < 0 || index >= length) {
				throw new Exception("Out Of Range");
			}
		}
		native def nativeInit() -> Void;
		native def nativeSet(Int index, Object v) -> Void;
		native def nativeGet(Int index) -> Object;
		static native def nativeCopy(Array src, Int srcOffset, Array dst, Int dstOffset, Int length) -> Void;
	}
}
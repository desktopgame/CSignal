//BEGIN-AUTOGENERATED-BLOCK
/**
 * @file namespace.h
 * @brief 名前空間を定義します。
 * @author koya
 * @date 2018/10/31
 */
//END-AUTOGENERATED-BLOCK

#pragma once
#ifndef BEACON_ENV_NAMESPACE_H
#define BEACON_ENV_NAMESPACE_H
#include "../util/tree_map.h"
#include "../util/string_pool.h"
#include "../util/vector.h"
#include "../util/numeric_map.h"
#include <stdint.h>
struct ScriptContext;
#define TYPE_OBJECT (GetObjectTypeNamespace())
#define TYPE_INT (GetIntTypeNamespace())
#define TYPE_DOUBLE (GetDoubleTypeNamespace())
#define TYPE_CHAR (GetCharTypeNamespace())
#define TYPE_STRING (GetStringTypeNamespace())
#define TYPE_BOOL (GetBoolTypeNamespace())
#define TYPE_VOID (GetVoidTypeNamespace())
#define TYPE_NULL (GetNullTypeNamespace())
#define TYPE_EXCEPTION (GetExceptionTypeNamespace())


#define GENERIC_OBJECT ((GetObjectTypeNamespace()->GenericSelf))
#define GENERIC_INT ((GetIntTypeNamespace()->GenericSelf))
#define GENERIC_DOUBLE ((GetDoubleTypeNamespace()->GenericSelf))
#define GENERIC_CHAR ((GetCharTypeNamespace()->GenericSelf))
#define GENERIC_STRING ((GetStringTypeNamespace()->GenericSelf))
#define GENERIC_BOOL ((GetBoolTypeNamespace()->GenericSelf))
#define GENERIC_VOID ((GetVoidTypeNamespace()->GenericSelf))
#define GENERIC_NULL ((GetNullTypeNamespace()->GenericSelf))
#define GENERIC_EXCEPTION ((GetExceptionTypeNamespace()->GenericSelf))

struct Type;
struct Class;
struct Interface;
/**
 * 名前空間を表す構造体.
 */
typedef struct Namespace {
	StringView Name;
	struct Namespace* Parent;
	NumericMap* NamespaceMap;
	NumericMap* TypeMap;
	uint32_t RefCount;
} Namespace;

/**
 * 指定の名前でトップレベルに新しい名前空間を定義します.
 * @param namev
 * @return 既に存在するならそれを返します.
 */
Namespace* CreateNamespaceAtRoot(StringView namev);

/**
 * 指定の名前でトップレベルから名前空間を検索します.
 * @param namev
 * @return
 */
Namespace* FindNamespaceFromRoot(StringView namev);

/**
 * コンテキストを指定してトップレベルの名前空間を返します.
 * @param sctx
 * @param namev
 * @return
 */
Namespace* CFindNamespaceFromRoot(struct ScriptContext* sctx, StringView namev);

/**
 * 指定の名前空間に新しい名前空間を定義します.
 * @param self
 * @param namev
 * @return 既に存在するならそれを返します.
 */
Namespace* AddNamespaceNamespace(Namespace* self, StringView namev);

/**
 * この名前空間にクラスを含めます.
 * クラスのカウントは +1 されます。
 * @param self
 * @param type
 */
struct Type* AddTypeNamespace(Namespace* self, struct Type* type);

/**
 * 指定の名前空間から指定の名前の名前空間を検索します.
 * @param self
 * @param namev
 * @return 見つからないなら NULL
 */
Namespace* FindNamespaceFromNamespace(Namespace* self, StringView namev);

/**
 * 指定の名前空間で指定の名前のタイプを検索します.
 * @param self
 * @param namev
 * @return 見つからないなら NULL
 */
struct Type* FindTypeFromNamespace(Namespace* self, StringView namev);

/**
 * 指定の名前空間で指定の名前のクラスを検索します.
 * @param self
 * @param namev
 * @return 見つからないなら NULL
 */
struct Class* FindClassFromNamespace(Namespace* self, StringView namev);

/**
 * 指定の名前空間で指定の名前のインターフェースを検索します.
 * @param self
 * @param namev
 * @return 見つからないなら NULL
 */
struct Interface* FindInterfaceFromNamespace(Namespace* self, StringView namev);

/**
 * beacon 名前空間を返します.
 * @return
 */
Namespace* GetBeaconNamespace();

/**
 * beacon.lang 名前空間を返します.
 * @return
 */
Namespace* GetLangNamespace();

/**
 * beacon.unsafe 名前空間を返します.
 * @return
 */
Namespace* GetUnsafeNamespace();

/**
 * $placeholder 名前空間を返します.
 * @return
 */
Namespace* GetPlaceholderNamespace();

/**
 * 現在のスクリプトコンテキストで Object タイプを返します.
 * @return
 */
struct Type* GetObjectTypeNamespace();

/**
 * 現在のスクリプトコンテキストで int タイプを返します.
 * @return
 */
struct Type* GetIntTypeNamespace();

/**
 * 現在のスクリプトコンテキストで double タイプを返します.
 * @return
 */
struct Type* GetDoubleTypeNamespace();

/**
 * 現在のスクリプトコンテキストで char タイプを返します.
 * @return
 */
struct Type* GetCharTypeNamespace();

/**
 * 現在のスクリプトコンテキストで string タイプを返します.
 * @return
 */
struct Type* GetStringTypeNamespace();

/**
 * 現在のスクリプトコンテキストで bool タイプを返します.
 * @return
 */
struct Type* GetBoolTypeNamespace();

/**
 * 現在のスクリプトコンテキストで void タイプを返します.
 * @return
 */
struct Type* GetVoidTypeNamespace();

/**
 * 現在のスクリプトコンテキストで null タイプを返します.
 * @return
 */
struct Type* GetNullTypeNamespace();

/**
 * beacon::lang::Exception
 * @return
 */
struct Type* GetExceptionTypeNamespace();

/**
 * 指定の名前空間のすべての型で unlink を呼び出します.
 * @param self
 */
void UnlinkNamespace(Namespace* self);

/**
 * 名前空間を完全な文字列として返します.
 * @param self
 * @return
 */
StringView NamespaceToString(Namespace* self);

/**
 * 名前空間を開放します.
 * @param self
 */
void DeleteNamespace(Namespace* self);
#endif // !SIGNAL_ENV_NAMESPACE_H

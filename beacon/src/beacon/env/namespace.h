//BEGIN-AUTOGENERATED-BLOCK
/**
 * @file namespace.h
 * @brief 名前空間を定義します。
 * @author koya
 * @date 2018/10/31
 */
//END-AUTOGENERATED-BLOCK

#pragma once
#ifndef BEACON_ENV_NAMESPACE_H
#define BEACON_ENV_NAMESPACE_H
#include "../util/tree_map.h"
#include "../util/string_pool.h"
#include "../util/vector.h"
#include "../util/numeric_map.h"
#include <stdint.h>
struct bc_ScriptContext;
#define BC_TYPE_OBJECT (bc_GetObjectTypeNamespace())
#define BC_TYPE_INT (bc_GetIntTypeNamespace())
#define BC_TYPE_DOUBLE (bc_GetDoubleTypeNamespace())
#define BC_TYPE_CHAR (bc_GetCharTypeNamespace())
#define BC_TYPE_STRING (bc_GetStringTypeNamespace())
#define BC_TYPE_BOOL (bc_GetBoolTypeNamespace())
#define BC_TYPE_VOID (bc_GetVoidTypeNamespace())
#define BC_TYPE_NULL (bc_GetNullTypeNamespace())
#define BC_TYPE_EXCEPTION (bc_GetExceptionTypeNamespace())


#define BC_GENERIC_OBJECT ((bc_GetObjectTypeNamespace()->GenericSelf))
#define BC_GENERIC_INT ((bc_GetIntTypeNamespace()->GenericSelf))
#define BC_GENERIC_DOUBLE ((bc_GetDoubleTypeNamespace()->GenericSelf))
#define BC_GENERIC_CHAR ((bc_GetCharTypeNamespace()->GenericSelf))
#define BC_GENERIC_STRING ((bc_GetStringTypeNamespace()->GenericSelf))
#define BC_GENERIC_BOOL ((bc_GetBoolTypeNamespace()->GenericSelf))
#define BC_GENERIC_VOID ((bc_GetVoidTypeNamespace()->GenericSelf))
#define BC_GENERIC_NULL ((bc_GetNullTypeNamespace()->GenericSelf))
#define BC_GENERIC_EXCEPTION ((bc_GetExceptionTypeNamespace()->GenericSelf))

struct bc_Type;
struct Class;
struct Interface;
/**
 * 名前空間を表す構造体.
 */
typedef struct bc_Namespace {
	StringView Name;
	struct bc_Namespace* Parent;
	NumericMap* NamespaceMap;
	NumericMap* TypeMap;
	uint32_t RefCount;
} bc_Namespace;

/**
 * 指定の名前でトップレベルに新しい名前空間を定義します.
 * @param namev
 * @return 既に存在するならそれを返します.
 */
bc_Namespace* bc_CreateNamespaceAtRoot(StringView namev);

/**
 * 指定の名前でトップレベルから名前空間を検索します.
 * @param namev
 * @return
 */
bc_Namespace* bc_FindNamespaceFromRoot(StringView namev);

/**
 * コンテキストを指定してトップレベルの名前空間を返します.
 * @param sctx
 * @param namev
 * @return
 */
bc_Namespace* bc_CFindNamespaceFromRoot(struct bc_ScriptContext* sctx, StringView namev);

/**
 * 指定の名前空間に新しい名前空間を定義します.
 * @param self
 * @param namev
 * @return 既に存在するならそれを返します.
 */
bc_Namespace* bc_AddNamespaceNamespace(bc_Namespace* self, StringView namev);

/**
 * この名前空間にクラスを含めます.
 * クラスのカウントは +1 されます。
 * @param self
 * @param type
 */
struct bc_Type* bc_AddTypeNamespace(bc_Namespace* self, struct bc_Type* type);

/**
 * 指定の名前空間から指定の名前の名前空間を検索します.
 * @param self
 * @param namev
 * @return 見つからないなら NULL
 */
bc_Namespace* bc_FindNamespaceFromNamespace(bc_Namespace* self, StringView namev);

/**
 * 指定の名前空間で指定の名前のタイプを検索します.
 * @param self
 * @param namev
 * @return 見つからないなら NULL
 */
struct bc_Type* bc_FindTypeFromNamespace(bc_Namespace* self, StringView namev);

/**
 * 指定の名前空間で指定の名前のクラスを検索します.
 * @param self
 * @param namev
 * @return 見つからないなら NULL
 */
struct Class* bc_FindClassFromNamespace(bc_Namespace* self, StringView namev);

/**
 * 指定の名前空間で指定の名前のインターフェースを検索します.
 * @param self
 * @param namev
 * @return 見つからないなら NULL
 */
struct Interface* bc_FindInterfaceFromNamespace(bc_Namespace* self, StringView namev);

/**
 * beacon 名前空間を返します.
 * @return
 */
bc_Namespace* bc_GetBeaconNamespace();

/**
 * beacon.lang 名前空間を返します.
 * @return
 */
bc_Namespace* bc_GetLangNamespace();

/**
 * beacon.unsafe 名前空間を返します.
 * @return
 */
bc_Namespace* bc_GetUnsafeNamespace();

/**
 * $placeholder 名前空間を返します.
 * @return
 */
bc_Namespace* bc_GetPlaceholderNamespace();

/**
 * 現在のスクリプトコンテキストで Object タイプを返します.
 * @return
 */
struct bc_Type* bc_GetObjectTypeNamespace();

/**
 * 現在のスクリプトコンテキストで int タイプを返します.
 * @return
 */
struct bc_Type* bc_GetIntTypeNamespace();

/**
 * 現在のスクリプトコンテキストで double タイプを返します.
 * @return
 */
struct bc_Type* bc_GetDoubleTypeNamespace();

/**
 * 現在のスクリプトコンテキストで char タイプを返します.
 * @return
 */
struct bc_Type* bc_GetCharTypeNamespace();

/**
 * 現在のスクリプトコンテキストで string タイプを返します.
 * @return
 */
struct bc_Type* bc_GetStringTypeNamespace();

/**
 * 現在のスクリプトコンテキストで bool タイプを返します.
 * @return
 */
struct bc_Type* bc_GetBoolTypeNamespace();

/**
 * 現在のスクリプトコンテキストで void タイプを返します.
 * @return
 */
struct bc_Type* bc_GetVoidTypeNamespace();

/**
 * 現在のスクリプトコンテキストで null タイプを返します.
 * @return
 */
struct bc_Type* bc_GetNullTypeNamespace();

/**
 * beacon::lang::Exception
 * @return
 */
struct bc_Type* bc_GetExceptionTypeNamespace();

/**
 * 指定の名前空間のすべての型で unlink を呼び出します.
 * @param self
 */
void bc_UnlinkNamespace(bc_Namespace* self);

/**
 * 名前空間を完全な文字列として返します.
 * @param self
 * @return
 */
StringView bc_NamespaceToString(bc_Namespace* self);

/**
 * 名前空間を開放します.
 * @param self
 */
void bc_DeleteNamespace(bc_Namespace* self);
#endif // !SIGNAL_ENV_NAMESPACE_H

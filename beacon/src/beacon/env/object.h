// BEGIN-AUTOGENERATED-BLOCK
/**
 * @file object.h
 * @brief beaconで使用されるあらゆるオブジェクトを定義します。
 * @author koya
 * @date 2018/10/31
 */
// END-AUTOGENERATED-BLOCK

#pragma once
#ifndef BEACON_ENV_OBJECT_H
#define BEACON_ENV_OBJECT_H
#include <stdbool.h>
#include "../util/vector.h"

struct bc_GenericType;
struct bc_VTable;
struct bc_ScriptContext;
/**
 * オブジェクトの種類を表すためのフラグ。
 */
typedef enum bc_ObjectFlags {
        OBJECT_FLG_NONE = 1 << 0,
        OBJECT_FLG_COROUTINE = 1 << 1,
        OBJECT_FLG_CLONE = 1 << 2,
} bc_ObjectFlags;
/**
 * オブジェクトの着色状態.
 * インクリメンタルGCのためのフラグです。
 */
typedef enum bc_ObjectPaint {
        PAINT_UNMARKED_T,
        PAINT_MARKED_T,
        PAINT_DIFF_T,
        PAINT_ONEXIT_T,
} bc_ObjectPaint;

/**
 * オブジェクトに対して送信することができる命令です。
 * これを判別することで一つの関数ポインタで処理を分岐させ、
 * オブジェクトひとつあたりのサイズを削減します。
 */
typedef int bc_ObjectMessage;

/**
 * メッセージの引数です。
 */
typedef union bc_ObjectMessageArgument {
        int Int;
        void* Any;
} bc_ObjectMessageArgument;

/**
 * 全てのオブジェクトがサポートする必要のあるメッセージです。
 */
typedef enum bc_StandardObjectMessage {
        OBJECT_MSG_NONE = 0,
        OBJECT_MSG_PRINT,
        OBJECT_MSG_DELETE,
        OBJECT_MSG_DESTROY,
        OBJECT_MSG_MARKALL,
        OBJECT_MSG_CLONE,
        OBJECT_MSG_GENERIC,
        OBJECT_MSG_END,
} bc_StandardObjectMessage;

/**
 * ヒープに関連付けされるオブジェクト.
 * beacon で使用される全てのデータはこれ。
 */
typedef struct bc_Object {
        struct bc_GenericType* GType;
        struct bc_VTable* VPtr;
        bc_ObjectPaint Paint;
        bc_ObjectFlags Flags;
        bc_Vector* Fields;
        bool Update;
        void* (*OnMessage)(struct bc_Object* self, bc_ObjectMessage msg,
                           int argc, bc_ObjectMessageArgument argv[]);
} bc_Object;

/**
 * 標準的なメッセージハンドラです。
 * 拡張メッセージハンドラを実装する場合はこれをラップするのが簡単です。
 * @param self
 * @param msg
 * @param argc
 * @param argv
 * @return
 */
void* bc_HandleObjectMessage(bc_Object* self, bc_ObjectMessage msg, int argc,
                             bc_ObjectMessageArgument argv[]);

/**
 * 指定のサイズのメモリを確保して、ヒープに紐づけます。
 * @param sctx
 * @param object_size
 * @return
 */
void* bc_NewObject(struct bc_ScriptContext* sctx, size_t object_size);

/**
 * オブジェクトを生成して型を割り当てます。
 * @param sctx
 * @param object_size
 * @param gtype
 * @return
 */
void* bc_ConstructObject(struct bc_ScriptContext* sctx, size_t object_size,
                         struct bc_GenericType* gtype);

/**
 * 可能ならキャッシュを返します.
 * @param i
 * @return
 */
bc_Object* bc_GetIntObject(int i);

/**
 * 真偽値型の値を参照します.
 * @param b
 * @return
 */
bc_Object* bc_GetBoolObject(bool b);

/**
 * trueを参照します.
 * @return
 */
bc_Object* bc_GetTrueObject();

/**
 * falseを参照します.
 * @return
 */
bc_Object* bc_GetFalseObject();

/**
 * nullを参照します.
 * @return
 */
bc_Object* bc_GetNullObject();

/**
 * trueを参照します.
 * @param sctx
 * @return
 */
bc_Object* bc_GetUniqueTrueObject(struct bc_ScriptContext* sctx);

/**
 * falseを参照します.
 * @param sctx
 * @return
 */
bc_Object* bc_GetUniqueFalseObject(struct bc_ScriptContext* sctx);

/**
 * nullを参照します.
 * @param sctx
 * @return
 */
bc_Object* bc_GetUniqueNullObject(struct bc_ScriptContext* sctx);

/**
 * このオブジェクトを複製します.
 * int/double/char/boolでのみ使用可能です。
 * @param self
 * @return
 */
bc_Object* bc_CopyObject(bc_Object* self);

/**
 * 参照としてオブジェクトを複製します.
 * @param self
 * @return
 */
bc_Object* bc_CloneObject(bc_Object* self);

/**
 * このオブジェクトと
 * このオブジェクトから参照可能なオブジェクトを全てマークします.
 * @param self
 * @param paint
 */
void bc_PaintAllObject(bc_Object* self, bc_ObjectPaint paint);

/**
 * このオブジェクトと
 * このオブジェクトから参照可能なオブジェクトを全てマークします.
 * @param self
 */
void bc_MarkAllObject(bc_Object* self);

/**
 * まだ開放されていないオブジェクトの数を返します.
 * @return
 */
int bc_CountActiveObject();

/**
 * オブジェクトの詳細を出力します.
 * @param self
 */
void bc_PrintObject(bc_Object* self);

/**
 * オブジェクトを開放します.
 * @param self
 */
void bc_DeleteObject(bc_Object* self);

/**
 * 定数などを解放するための関数.
 * @param self
 */
void bc_DestroyObject(bc_Object* self);

/**
 * beaconからCの int へ変換します.
 * @param self
 * @return
 */
int bc_ObjectToInt(bc_Object* self);

/**
 * beaconからCの double へ変換します.
 * @param self
 * @return
 */
double bc_ObjectToDouble(bc_Object* self);

/**
 * beaconからCの bool へ変換します.
 * @param self
 * @return
 */
bool bc_ObjectToBool(bc_Object* self);

/**
 * beaconからCの char へ変換します.
 * @param self
 * @return
 */
char bc_ObjectToChar(bc_Object* self);

/**
 * beaconからCの long へ変換します.
 * @param self
 * @return
 */
long bc_ObjectToLong(bc_Object* self);

/**
 * Cからbeaconの Int へ変換します.
 * @param i
 * @return
 */
bc_Object* bc_IntToObject(int i);

/**
 * Cからbeaconの Double へ変換します.
 * @param d
 * @return
 */
bc_Object* bc_DoubleToObject(double d);

/**
 * Cからbeaconの bool へ変換します.
 * @param b
 * @return
 */
bc_Object* bc_BoolToObject(bool b);

/**
 * Cからbeaconの char へ変換します.
 * @param c
 * @return
 */
bc_Object* bc_CharToObject(char c);

/**
 * Cからbeacon
 * @param l
 * @return
 */
bc_Object* bc_LongToObject(long l);

/**
 * 指定の型のデフォルト値を返します.
 * @param gt
 * @return
 */
bc_Object* bc_GetDefaultObject(struct bc_GenericType* gt);

/**
 * このオブジェクトのデバッグ表現を返します.
 * @param self
 * @return
 */
const char* bc_GetObjectName(bc_Object* self);

/**
 * オブジェクトが文字型の値を持つなら true.
 * @param self
 * @return
 */
bool bc_IsCharValue(bc_Object* self);

/**
 * オブジェクトが真偽値型の値を持つなら true.
 * @param self
 * @return
 */
bool bc_IsBoolValue(bc_Object* self);

/**
 * オブジェクトが整数型の値を持つなら true.
 * @param self
 * @return
 */
bool bc_IsIntValue(bc_Object* self);

/**
 * オブジェクトが実数型の値を持つなら true.
 * @param self
 * @return
 */
bool bc_IsDoubleValue(bc_Object* self);

/**
 * オブジェクトが文字列型の値を持つなら true.
 * @param self
 * @return
 */
bool bc_IsStringValue(bc_Object* self);

/**
 * オブジェクトが空なら true.
 * @param self
 * @return
 */
bool bc_IsNullValue(bc_Object* self);
#endif  // !SIGNAL_ENV_OBJECT_H

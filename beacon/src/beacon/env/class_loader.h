//BEGIN-AUTOGENERATED-BLOCK
/**
 * @file class_loader.h
 * @brief beacon言語のソースコードを読み込むための関数を定義します。
 * @author koya
 * @date 2018/10/31
 */
//END-AUTOGENERATED-BLOCK

#pragma once
#ifndef BEACON_PARSER_CLASS_LOADER_H
#define BEACON_PARSER_CLASS_LOADER_H
#include "../ast/ast.h"
#include "content_type.h"
#include "import_manager.h"
#include "../il/il_top_level.h"
#include "link_type.h"
#include <stdint.h>
#include <stdarg.h>
#include <stdbool.h>
struct bc_Enviroment;

/**
 * クラスローダーを表す構造体です.
 */
typedef struct bc_ClassLoader {
	bc_AST* SourceCode;
	ILToplevel* ILCode;

	struct bc_Enviroment* Env;
	bc_ImportManager* ImportManager;
	bc_ContentType Type;
	bc_LinkType Link;
	bc_Vector* TypeCaches;

	struct bc_ClassLoader* Parent;
	int Level;
	char* FileName;
//	bool error;
} bc_ClassLoader;

/**
 * 引数のクラスローダの error が true なら return します.
 * @param self
 */
#define bc_CL_ERROR(self) if(bc_GetLastPanic()) return

/**
 * 引数のクラスローダの error が true なら a を return します.
 * @param self
 * @param a
 * @return
 */
#define bc_CL_ERROR_RET(self, a) if(bc_GetLastPanic()) return (a)

/**
 * クラスローダーを作成します.
 * @param filename
 * @param type
 * @return
 */
bc_ClassLoader* bc_NewClassLoader(const char* filename, bc_ContentType type);

/**
 * ファイルの内容を解析して必要に応じてインポート先のファイルの読み込み、
 * 型の解決などその他必要な情報をまとめあげます。
 * @param self
 */
void bc_LoadClassLoader(bc_ClassLoader* self);

/**
 * ASTの解析をスキップして代わりに引数のASTを解析します.
 * このASTはクラスローダによって破棄されます。
 * これを使用する場合 filename は入力元を表すデバッグ表現にするべきです。
 * @param self
 * @param a
 */
void bc_LoadPassASTClassLoader(bc_ClassLoader* self, bc_AST* a);

/**
 * 実行時ディレクトリからの相対パスでファイルを仮読み込みします.
 * beacon/langの読み込みのための使用されます。
 * @param self
 * @param relativePath
 */
void bc_SpecialLoadClassLoader(bc_ClassLoader* self, char* relativePath);

/**
 * このクラスローダーを開放します.
 * @param self
 */
void bc_DeleteClassLoader(bc_ClassLoader* self);
#endif // !SIGNAL_PARSER_CLASS_LOADER_H

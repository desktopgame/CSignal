// BEGIN-AUTOGENERATED-BLOCK
/**
 * @file method.h
 * @brief メソッドを定義します。
 * @author koya
 * @date 2018/10/31
 */
// END-AUTOGENERATED-BLOCK

#pragma once
#ifndef BEACON_ENV_METHOD_H
#define BEACON_ENV_METHOD_H
#include <stdbool.h>
#include "../ast/access_level.h"
#include "../ast/modifier_type.h"
#include "../util/string_pool.h"
#include "../util/vector.h"
#include "member.h"
#include "native_method.h"
#include "script_method.h"
struct bc_Type;
struct bc_Interface;
struct bc_Frame;
struct bc_Enviroment;
struct bc_CallContext;
struct bc_ClassLoader;

/**
 * メソッドの種類を表す列挙.
 */
typedef enum bc_MethodType {
        METHOD_TYPE_SCRIPT_T,
        METHOD_TYPE_NATIVE_T,
        METHOD_TYPE_ABSTRACT_T,
} bc_MethodType;

/**
 * メソッドを表す構造体.
 */
typedef struct bc_Method {
        bc_Member Super;
        bc_StringView Name;
        bc_MethodType Type;
        struct bc_GenericType* ReturnGType;
        bc_Vector* Parameters;
        bc_Vector* TypeParameters;
        int Index;
        union {
                bc_ScriptMethod* Script;
                bc_NativeMethod* Native;
        } Kind;
} bc_Method;

/**
 * メソッドを作成します.
 * @param name
 * @param filename
 * @param lineno
 * @return
 */
bc_Method* bc_MallocMethod(bc_StringView name, const char* filename,
                           int lineno);
#define bc_NewMethod(name) (bc_MallocMethod(name, __FILE__, __LINE__))

/**
 * メソッドを実行します.
 * @param self
 * @param frame
 * @param env
 */
void bc_ExecuteMethod(bc_Method* self, struct bc_Frame* fr, bc_Enviroment* env);

/**
 * メソッドa とb が完全に等価である場合に true を返します.
 * もしくは戻り値がサブクラス型でオーバライドされている場合でも true です。
 * @see http://www.ne.jp/asahi/hishidama/home/tech/java/covariant.html
 * @param superM
 * @param subM
 * @param cctx
 * @return
 */
bool bc_IsOverridedMethod(bc_Method* superM, bc_Method* subM,
                          struct bc_CallContext* cctx);

/**
 * @param self
 * @param name
 * @return
 */
int bc_GetGenericIndexForMethod(bc_Method* self, bc_StringView namev);

/**
 * メソッドを開放します.
 * @param self
 */
void bc_DeleteMethod(bc_Method* self);

/**
 * このメソッドのマングル表現を返します.
 * @param self
 * @return
 */
bc_StringView bc_MangleMethod(bc_Method* self);

/**
 * 型の完全名とマングル表現を連結して返します.
 * @param self
 * @return
 */
bc_StringView bc_GetMethodUniqueName(bc_Method* self);

/**
 * メソッドがコルーチンとして機能できるなら true.
 * @param self
 * @return
 */
bool bc_IsCoroutineMethod(bc_Method* self);

/**
 * メソッドがイールドパターンで実装されているなら true.
 * @param self
 * @param error
 * @return
 */
bool bc_IsYieldMethod(bc_Method* self, bc_Vector* stmt_list, bool* error);

/**
 * このメソッドのためのユニークなイテレータ型を作成します.
 * 戻り値が Iterator である必要があります。
 * @param self
 * @param cll
 * @param stmt_list
 * @return
 */
struct bc_Type* bc_CreateIteratorTypeFromMethod(bc_Method* self,
                                                struct bc_ClassLoader* cll,
                                                bc_Vector* stmt_list);

#endif  // !SIGNAL_ENV_METHOD_H

//BEGIN-AUTOGENERATED-BLOCK
/**
 * @file generic_type.h
 * @brief ここに概要を記述します
 * @author koya
 * @date 2018/10/31
 */
//END-AUTOGENERATED-BLOCK

#pragma once
#ifndef BEACON_ENV_GENERIC_TYPE_H
#define BEACON_ENV_GENERIC_TYPE_H
#include "../util/vector.h"
//#include "type_parameter_rule.h"
#include <stdbool.h>
#include <assert.h>

#define bc_GENERIC2TYPE(gtype) (bc_GenericTypeToType(gtype))
#define bc_TYPE2GENERIC(type) (type->GenericSelf)

struct bc_Type;
struct bc_Method;
struct bc_Enviroment;
struct virtual_type;
struct bc_Frame;
struct bc_CallContext;
/**
 * 型変数つきの型宣言の型引数では GenericType 自身が使われますが、
 * それ自体が型変数の場合、何の型変数を指しているかを示す列挙型です.
 */
typedef enum bc_GenericTypeTag {
	GENERIC_TYPE_TAG_NONE_T,
	//クラスの型変数
	GENERIC_TYPE_TAG_CLASS_T,
	//メソッドの型変数
	GENERIC_TYPE_TAG_METHOD_T,
} bc_GenericTypeTag;

/**
 * 型変数つきの型宣言.
 */
typedef struct bc_GenericType {
	struct bc_Type* CoreType;
	bc_Vector* TypeArgs;
	//このジェネリックタイプの紐づけたられたコンテナ
	union {
		struct bc_Type* Type;
		struct bc_Method* Method;
	} Kind;
	//もしこの型が List<T> の Tを表すなら、
	//外側のクラスの何番目の型変数かを格納する。
	int VirtualTypeIndex;
	bc_GenericTypeTag Tag;
	bool IsMark;
	bool IsCtor;
} bc_GenericType;

//#define GenericType_validate(self) assert((self)->CoreType != NULL || self->VirtualTypeIndex != -1)

/**
 * 新しい型変数つきの型宣言を作成します.
 * @param ctype
 * @return
 */
#define bc_NewGenericType(ctype) (bc_MallocGenericType(ctype, __FILE__, __LINE__))

/**
 * CoreTypeがNULL以外なら GenericSelfを参照し、
 * NULLなら新規作成します。
 * @param CoreType
 * @return
 */
bc_GenericType* bc_RefGenericType(struct bc_Type* CoreType);

/**
 * 新しい型変数つきの型宣言を作成します.
 * 通常はマクロ版の NewGenericType を使用します。
 * @param ctype
 * @return
 */
bc_GenericType* bc_MallocGenericType(struct bc_Type* CoreType, const char* filename, int lineno);

/**
 * ジェネリックタイプを複製します.
 * @param self
 * @return
 */
bc_GenericType* bc_CloneGenericType(bc_GenericType* self);

/**
 * 現在のスクリプトコンテキストでどこからも参照されていない
 * GenericType の一覧を解放します。
 */
void bc_CollectGenericType();

/**
 * type#GenericSelf を解放する時に使います.
 * CollectGenericType より後に呼び出してください。
 * @param a
 */
void bc_LostownershipGenericType(bc_GenericType* a);

/**
 * self の子要素として a を追加します.
 * @param self
 * @param a
 */
void bc_AddArgsGenericType(bc_GenericType* self, bc_GenericType* a);

/**
 * a と b の距離を返します.
 * メソッドを解決する時、もっともマッチするオーバーロードを見つけるために使用されます。
 * @param self
 * @param other
 * @param cctx
 * @return 同じなら 0
 *         異なる継承階層なら -1
 *         サブタイプなら階層の数
 */
int bc_DistanceGenericType(bc_GenericType* self, bc_GenericType* other, struct bc_CallContext* cctx);
/**
 * a と b の距離を返します.
 * メソッドを解決する時、もっともマッチするオーバーロードを見つけるために使用されます。
 * @param self
 * @param other
 * @param fr
 * @return 同じなら 0
 *         異なる継承階層なら -1
 *         サブタイプなら階層の数
 */
int bc_RDistanceGenericType(bc_GenericType* self, bc_GenericType* other, struct bc_Frame* fr);

/**
 * 型変数と型を出力します.
 * @param self
 */
void bc_PrintGenericType(bc_GenericType* self);

/**
 * ジェネリックタイプをオペコードとして出力します.
 * @param self
 * @param env
 * @param ilctx
 */
void bc_GenerateGenericType(bc_GenericType* self, struct bc_Enviroment* env);

/**
 * 現在のコンテキストで self の型変数を解決します.
 * T ではなく T を内包する型(List<T>) などが戻り値になる時に使用されます。
 * @param self
 * @param cctx
 * @return
 */
bc_GenericType* bc_ApplyGenericType(bc_GenericType* self, struct bc_CallContext* cctx);
/**
 * 現在のコンテキストで self の型変数を解決します.
 * T ではなく T を内包する型(List<T>) などが戻り値になる時に使用されます。
 * @param self
 * @param fr
 * @return
 */
bc_GenericType* bc_RApplyGenericType(bc_GenericType* self, struct bc_CallContext* cctx, struct bc_Frame* fr);

/**
 * GenericType を type へ変換します.
 * @param self
 * @return
 */
struct bc_Type* bc_GenericTypeToType(bc_GenericType* self);
#endif // !SIGNAL_ENV_GENERIC_TYPE_H

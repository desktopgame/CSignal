//BEGIN-AUTOGENERATED-BLOCK
/**
 * @file meta_impl.h
 * @brief ここに概要を記述します
 * @author koya
 * @date 2018/10/31
 */
//END-AUTOGENERATED-BLOCK

#pragma once
#ifndef BEACON_ENV_META_H
#define BEACON_ENV_META_H
//クラス自体の実装に関わるメタ関数
#include "../method.h"
#include "../constructor.h"
#include "../operator_overload.h"
#include "../../il/call_context.h"
#include "../../util/vector.h"
#include "../../util/string_pool.h"
#include "../../vm/enviroment.h"
struct bc_Type;
struct bc_Class;
struct bc_Constructor;
/**
 * 仮引数と実引数のマッチ率を返します.
 * 一つでも継承関係のないパラメータ/アーギュメントの組みを見つけると -1 を返します.
 * マッチ率が高ければ高いほど 0 に近い値を返します。
 * @param params
 * @param ilargs
 * @param env
 * @param cctx
 * @return
 */
int bc_MetaILCalcScore(bc_Vector* params, bc_Vector* ilargs, bc_Enviroment* env, CallContext* cctx);

/**
 * 仮引数と実引数のマッチ率を返します.
 * こちらは GenericType* を 使用します。
 * @param params
 * @param gargs
 * @return
 */
int bc_MetaGCalcScore(bc_Vector* params, bc_Vector* gargs);

/**
 * 仮引数と実引数のマッチ率を返します.
 * こちらは Object* を 使用します。
 * @param params
 * @param args
 * @param typeargs
 * @param fr
 * @return
 */
int bc_MetaRCalcScore(bc_Vector* params, bc_Vector* args, bc_Vector* typeargs, struct bc_Frame* fr);

/**
 * もっとも一致するメソッドを返します.
 * @param method_vec
 * @param namev
 * @param ilargs
 * @param env
 * @param cctx
 * @param outIndex
 * @return
 */
bc_Method* bc_MetaILFindMethod(bc_Vector* method_vec, bc_StringView namev, bc_Vector * ilargs, bc_Enviroment * env, CallContext* cctx, int * outIndex);

/**
 * もっとも一致するメソッドを返します.
 * @param method_vec
 * @param namev
 * @param gargs
 * @param outIndex
 * @return
 */
bc_Method* bc_MetaGFindMethod(bc_Vector* method_vec, bc_StringView namev, bc_Vector * gargs, int* outIndex);

/**
 * スコープに基づく方法でもっとも一致するメソッドを返します.
 * @param context
 * @param method_vec
 * @param namev
 * @param ilargs
 * @param env
 * @param cctx
 * @param outIndex
 * @return
 */
bc_Method* bc_MetaScopedILFindMethod(struct bc_Class* context, bc_Vector* method_vec, bc_StringView namev, bc_Vector * ilargs, bc_Enviroment * env, CallContext* cctx, int * outIndex);
/**
 * スコープに基づく方法でもっとも一致するメソッドを返します.
 * @param context
 * @param method_vec
 * @param namev
 * @param gargs
 * @param outIndex
 * @return
 */
bc_Method* bc_MetaScopedGFindMethod(struct bc_Class* context, bc_Vector* method_vec, bc_StringView namev, bc_Vector * gargs, int * outIndex);

/**
 * もっとも一致するコンストラクタを返します.
 * @param method_vec
 * @param name
 * @param ilargs
 * @param env
 * @param cctx
 * @param outIndex
 * @return
 */
bc_Constructor* bc_MetaILFindConstructor(bc_Vector* ctor_vec, bc_Vector* ilargs, bc_Enviroment* env, CallContext* cctx, int* outIndex);

/**
 * もっとも一致するコンストラクタを返します.
 * @param ctor_vec
 * @param args
 * @param type_args
 * @param fr
 * @param outIndex
 * @return
 */
bc_Constructor* bc_MetaRFindConstructor(bc_Vector* ctor_vec, bc_Vector* args, bc_Vector* typeargs, struct bc_Frame* fr, int* outIndex);
/**
 * スコープに基づく方法でもっとも一致するコンストラクタを返します.
 * @param context
 * @param ctor_vec
 * @param name
 * @param ilargs
 * @param env
 * @param outIndex
 * @return
 */
bc_Constructor* bc_MetaScopedILFindConstructor(struct bc_Class* context, bc_Vector* ctor_vec, bc_Vector* ilargs, bc_Enviroment* env, CallContext* cctx, int* outIndex);
/**
 * スコープに基づく方法でもっとも一致するコンストラクタを返します.
 * @param context
 * @param ctor_vec
 * @param name
 * @param ilargs
 * @param env
 * @param outIndex
 * @return
 */
bc_Constructor* bc_MetaScopedRFindConstructor(struct bc_Class* context, bc_Vector* ctor_vec, bc_Vector* gargs, bc_Vector* typeargs, struct bc_Frame* fr, int* outIndex);

/**
 * 演算子オーバーロードを検索します.
 * @param opov_vec
 * @param type
 * @param gargs
 * @param outIndex
 * @return
 */
bc_OperatorOverload* bc_MetaGFindOperator(bc_Vector* opov_vec, bc_OperatorType type, bc_Vector* gargs, int* outIndex);

/**
 * 指定のメソッドが現在のコンテキストで有効なら true.
 * @param m
 * @param cctx
 * @return
 */
bool bc_IsMetaMethodAccessValid(struct bc_Method* m, CallContext* cctx);
/**
 * 指定のメソッドが現在のコンテキストで有効なら true.
 * @param m
 * @param cctx
 * @return
 */
bool bc_IsMetaConstructorAccessValid(struct bc_Constructor* ctor, CallContext* cctx);
#endif // !SIGNAL_ENV_META_H

//BEGIN-AUTOGENERATED-BLOCK
/**
 * @file class_find.h
 * @brief ここに概要を記述します
 * @author koya
 * @date 2018/10/31
 */
//END-AUTOGENERATED-BLOCK

#ifndef BEACON_TYPE_FIND_H
#define BEACON_TYPE_FIND_H
#include "../../util/string_pool.h"
#include "../../util/vector.h"
#include "class_impl.h"
/**
 * 指定の名前を持つフィールドを返します.
 * @param self
 * @param namev
 * @param outIndex
 * @return 無ければ NULL
 */
struct bc_Field* FindFieldClass(Class* self, StringView namev, int* outIndex);

/**
 * 指定の名前を持つフィールドを返します.
 * selfの中に見つけられなかった場合には親クラスも検索します。
 * @param self
 * @param namev
 * @param outIndex
 * @return
 */
struct bc_Field* FindTreeFieldClass(Class* self, StringView namev, int* outIndex);

/**
 * 指定の名前を持つ静的フィールドを返します.
 * @param self
 * @param namev
 * @param outIndex
 * @return 無ければ NULL
 */
struct bc_Field* FindSFieldClass(Class* self, StringView namev, int* outIndex);

/**
 * 指定の名前を持つ静的フィールドを返します.
 * selfの中に見つけられなかった場合には親クラスも検索します。
 * @param self
 * @param namev
 * @param outIndex
 * @return 無ければ NULL
 */
struct bc_Field* FindTreeSFieldClass(Class* self, StringView namev, int* outIndex);

/**
 * 指定位置のフィールドを返します.
 * このクラスの上や下も含めて検索します。
 * つまりこの index は self の最上位クラスから self までに現れる全てのフィールドの通し番号です。
 * @param self
 * @param index
 * @return
 */
struct bc_Field* GetFieldClass(Class* self, int index);

/**
 * 指定位置の静的フィールドを返します.
 * このクラスの上や下も含めて検索します。
 * つまりこの index は self の最上位クラスから self までに現れる全てのフィールドの通し番号です。
 * @param self
 * @param index
 * @return
 */
struct bc_Field* GetSFieldClass(Class* self, int index);

/**
 * クラスに指定のフィールドが含まれるなら true.
 * @param self
 * @param f
 * @return
 */
bool IsContainsFieldClass(Class* self, struct bc_Field* f);

/**
 * クラスに指定の静的フィールドが含まれるなら true.
 * @param self
 * @param f
 * @return
 */
bool IsContainsSFieldClass(Class* self, struct bc_Field* f);

/**
 * 指定のクラスからフィールドにアクセスできるなら true.
 * @param self
 * @param f
 * @return
 */
bool IsAccessibleFieldClass(Class* self, struct bc_Field* f);




/**
 * クラスに指定のプロパティが含まれるなら true.
 * @param self
 * @param p
 * @return
 */
bool IsContainsPropertyClass(Class* self, struct bc_Property* p);

/**
 * クラスに指定のプロパティが含まれるなら true.
 * @param self
 * @param p
 * @return
 */
bool IsContainsSPropertyClass(Class* self, struct bc_Property* p);

/**
 * 指定のクラスからプロパティにアクセスできるなら true.
 * @param self
 * @param p
 */
bool IsAccessiblePropertyClass(Class* self, struct bc_Property* p);

/**
 * 指定のクラスからアクセサにアクセスできるなら true.
 * @param self
 * @param pb
 * @return
 */
bool IsAccessiblePropertyAccessorClass(Class* self, struct bc_PropertyBody* pb);

/**
 * 指定のプロパティが内部的に使用しているフィールドを返します.
 * @param self
 * @param p
 * @return
 */
int GetFieldByPropertyClass(Class* self, struct bc_Property* p);

/**
 * @param self
 * @param index
 * @return
 */
struct bc_Property* GetPropertyClass(Class* self, int index);
/**
 * @param self
 * @param index
 * @return
 */
struct bc_Property* GetSPropertyClass(Class* self, int index);

/**
 * 指定の名前のプロパティを検索します.
 * @param self
 * @param namev
 * @param outIndex
 * @return
 */
struct bc_Property* FindPropertyClass(Class* self, StringView namev, int* outIndex);

/**
 * 指定の名前を持つプロパティを返します.
 * selfの中に見つけられなかった場合には親クラスも検索します。
 * @param self
 * @param namev
 * @param outIndex
 * @return
 */
struct bc_Property* FindTreePropertyClass(Class* self, StringView namev, int* outIndex);

/**
 * 指定の名前の静的プロパティを検索します.
 * @param self
 * @param namev
 * @param outIndex
 * @return
 */
struct bc_Property* FindSPropertyClass(Class* self, StringView namev, int* outIndex);

/**
 * 指定の名前を持つ静的プロパティを返します.
 * selfの中に見つけられなかった場合には親クラスも検索します。
 * @param self
 * @param namev
 * @param outIndex
 * @return
 */
struct bc_Property* FindTreeSPropertyClass(Class* self, StringView namev, int* outIndex);



/**
 * もっとも一致するコンストラクタを返します.
 * @param self
 * @param args<Object*> 呼び出し側で開放してください.
 * @param typeargs
 * @param outIndex
 * @return 無ければ空
 */
struct bc_Constructor* RFindConstructorClass(Class* self, Vector* args, Vector* typeargs, Frame* fr, int* outIndex);

/**
 * もっとも一致するコンストラクタを返します.
 * @param self
 * @param args<il_argument*> 呼び出し側で開放してください.
 * @param env
 * @param cctx
 * @param outIndex
 * @return 無ければ空
 */
struct bc_Constructor* ILFindConstructorClass(Class* self, Vector* args, Enviroment* env, CallContext* cctx, int* outIndex);

/**
 * 引数が一つもないコンストラクタを検索して返します.
 * @param self
 * @param env
 * @param cctx
 * @param outIndex
 * @return
 */
struct bc_Constructor* ILFindEmptyConstructorClass(Class* self, Enviroment* env, CallContext* cctx, int* outIndex);

/**
 * もっとも一致するメソッドを返します.
 * @param self
 * @param namev
 * @param env
 * @param cctx
 * @param args<il_argument*>
 * @param outIndex メソッドへのインデックス
 * @return
 */
struct bc_Method* ILFindMethodClass(Class* self, StringView namev, Vector* args, Enviroment* env, CallContext* cctx, int* outIndex);

/**
 * もっとも一致するメソッドを返します.
 * @param self
 * @param namev
 * @param gargs
 * @param outIndex
 * @return
 */
struct bc_Method* GFindMethodClass(Class* self, StringView namev, Vector* gargs, int* outIndex);

/**
 * equalsメソッドを検索します.
 * @param self
 * @param outIndex
 * @return
 */
struct bc_Method* GFindEqMethodClass(Class* self, int* outIndex);

/**
 * もっとも一致する静的メソッドを返します.
 * @param self
 * @param namev
 * @param env
 * @param cctx
 * @param args<il_argument*>
 * @param outIndex メソッドへのインデックス
 * @return
 */
struct bc_Method* ILFindSMethodClass(Class* self, StringView namev, Vector* args, Enviroment* env, CallContext* cctx, int* outIndex);

/**
 * もっとも一致する静的メソッドを返します.
 * @param self
 * @param namev
 * @param gargs
 * @param outIndex
 * @return
 */
struct bc_Method* GFindSMethodClass(Class* self, StringView namev, Vector* gargs, int* outIndex);

/**
 * 指定位置のメソッドを返します.
 * このクラスの上や下も含めて検索します。
 * つまりこの index は self の最上位クラスから self までに現れる全てのメソッドの通し番号です。
 * @param o
 * @param index
 * @return
 */
struct bc_Method* GetMethodClass(struct bc_Object* o, int index);

/**
 * 指定位置のメソッドを返します.
 * このクラスの上や下も含めて検索します。
 * つまりこの index は self の最上位クラスから self までに現れる全てのメソッドの通し番号です。
 * @param self
 * @param index
 * @return
 */
struct bc_Method* GetSMethodClass(Class* self, int index);

/**
 * selfから、 interTypeの仮想関数テーブルの interIndex番目に属するメソッド
 * を実装するために定義されたメソッドを検索して返します。
 * @param self
 * @param interType
 * @param interIndex
 * @return
 */
struct bc_Method* GetImplMethodClass(Class* self, bc_Type* interType, int interMIndex);




/**
 * @param self
 * @param type
 * @param args
 * @param env
 * @param cctx
 * @param outIndex
 * @return
 */
struct bc_OperatorOverload* GFindOperatorOverloadClass(Class* self, bc_OperatorType type, Vector* args, Enviroment* env, CallContext* cctx, int* outIndex);

struct bc_OperatorOverload* ILFindOperatorOverloadClass(Class* self, bc_OperatorType type, Vector* args, Enviroment* env, CallContext* cctx, int* outIndex);

struct bc_OperatorOverload* ArgFindOperatorOverloadClass(Class* self, bc_OperatorType type, Vector* args, Enviroment* env, CallContext* cctx, int* outIndex);

/**
 * @param self
 * @param index
 * @return
 */
struct bc_OperatorOverload* GetOperatorOverloadClass(Class* self, int index);

/**
 * 指定のクラスから Object クラスまで階層で m と互換性のあるメソッドを検索して返します.
 * @param self
 * @param m
 * @param outM
 * @return
 */
Vector* FindTreeMethodClass(Class* self, bc_Method* m);

/**
 * 指定のメソッド一覧に指定のメソッドが含まれるなら true.
 * 静的メソッドの場合はエラーを発生させます。
 * @param method_list
 * @param m
 */
bool IsContainsMethod(Vector* method_list, bc_Method* m, bc_Method** outM);

/**
 * 実装された全てのジェネリックインターフェイスを返します.
 * @param self
 * @return
 */
Vector* GetGenericInterfaceListClass(Class* self);

/**
 * 実装/継承された全てのジェネリックインターフェイスを返します.
 * @param self
 * @return
 */
Vector* GetGenericInterfaceTreeClass(Class* self);

/**
 * 実装された全てのインターフェイスを返します.
 * @param self
 * @return
 */
Vector* GetInterfaceListClass(Class* self);

/**
 * 実装/継承された全てのインターフェイスを返します.
 * @param self
 * @return
 */
Vector* GetInterfaceTreeClass(Class* self);

/**
 * @param self
 * @parma tinter
 * @return
 */
struct bc_GenericType* FindInterfaceTypeClass(Class* self, bc_Type* tinter, struct bc_GenericType** out_baseline);
#endif
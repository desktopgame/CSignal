// BEGIN-AUTOGENERATED-BLOCK
/**
 * @file heap.h
 * @brief オブジェクトを格納するヒープです。
 * @author koya
 * @date 2018/10/31
 */
// END-AUTOGENERATED-BLOCK

#pragma once
#ifndef BEACON_ENV_HEAP_H
#define BEACON_ENV_HEAP_H
#include <stdbool.h>
#include "../util/cache.h"
#include "../util/vector.h"
#include "object.h"

/**
 * オブジェクトの一覧を格納します.
 */
typedef struct bc_Heap bc_Heap;

/**
 * ヒープを初期化します。
 */
void bc_InitHeap();

/**
 * ヒープを破棄します。
 */
void bc_DestroyHeap();

/**
 * ヒープにオブジェクトを追加します.
 * obj#blockingがtrueなら、
 * 追加せずに obj#paint を PAINT_ONEXIT_T へ変更します。
 * @param obj
 */
void bc_AddHeap(bc_Object* obj);

/**
 * ルートの一覧に obj を追加します。
 * @param obj
 */
void bc_AddRoot(bc_Object* obj);

/**
 * 指定のオブジェクトをヒープから取り除きます.
 * @param o
 */
void bc_IgnoreHeap(bc_Object* o);

/**
 * ヒープの中身をダンプします.
 */
void bc_DumpHeap();

/**
 * GCが完全に実行されるまでウェイトします。
 */
void bc_WaitFullGC();

/**
 * STWが要求されているならウェイトします。
 */
void bc_CheckSTWRequest();

/**
 * 呼び出し側のスレッドをウェイトして、
 * GCスレッドがループの先頭に戻ると再開します。
 * この呼び出しから次の bc_EndHeapSafeInvoke までの間、GCスレッドは停止します。
 * この関数は静的なフィールドを解放するために提供されています。
 * プログラムが正常に終了したならば、全てのローカル変数とスタック変数は解放されます。
 * ですが、静的なフィールドは生存しているのでこれを安全に NULL
 * にする必要があります。
 * それを行わないまま単純に静的フィールドを解放してしまうと、
 * 静的フィールドがリテラルのような定数プールによって生成されたオブジェクトを参照していた場合に、
 * オブジェクトが二回破棄されてしまいます。
 * これを防止するために実装されました。
 */
void bc_BeginHeapSafeInvoke();

/**
 * この関数が呼び出されるとGCスレッドは先頭から再開します。
 */
void bc_EndHeapSafeInvoke();

/**
 * この関数が呼ばれてから bc_EndNewConstant が呼ばれるまでの間に
 * 生成されたオブジェクトを定数としてマークします。
 * これらはヒープに登録されません。
 * 例えばリテラルを生成する場合はこの関数を事前に呼び出す必要があります。
 */
void bc_BeginNewConstant();

/**
 * 定数としてのマークを終了します。
 */
void bc_EndNewConstant();

/**
 * この関数が呼ばれてから bc_EndNewRuntime が呼ばれるまでの間に
 * 生成されたオブジェクトを実行時に生成されたオブジェクトと同様に扱います。
 * これらはヒープに登録されます。
 * 静的フィールドはプログラムの実行前に初期化されますが、
 * それがリテラルであるとは限りません。
 */
int bc_BeginNewRuntime();

/**
 * 実行時に生成されたオブジェクトとしてのマークを終了します。
 * @param depth
 */
void bc_EndNewRuntime(int depth);

/**
 * この関数が呼ばれてから bc_EndGCPending が呼ばれるまでの間に
 * GCの実行を行いません。
 */
void bc_BeginGCPending();

/**
 * GCの実行を再開します。
 */
void bc_EndGCPending();

/**
 * ヒープのスタック情報をリセットします。
 */
void bc_ResetHeapState();
#endif  // !SIGNAL_ENV_HEAP_H

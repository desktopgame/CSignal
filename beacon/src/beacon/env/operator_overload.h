// BEGIN-AUTOGENERATED-BLOCK
/**
 * @file operator_overload.h
 * @brief オペレータオーバーロードを定義します。
 * @author koya
 * @date 2018/10/31
 */
// END-AUTOGENERATED-BLOCK

#ifndef BEACON_ENV_OPERATOR_OVERLOAD_H
#define BEACON_ENV_OPERATOR_OVERLOAD_H
#include "../ast/access_level.h"
#include "../ast/operator_type.h"
#include "../util/vector.h"
#include "member.h"
struct bc_Type;
struct bc_Enviroment;
struct bc_GenericType;
struct bc_Frame;
/**
 * 演算子オーバーロードを表す構造体.
 */
typedef struct bc_OperatorOverload {
        bc_Member Super;
        struct bc_GenericType* ReturnGType;
        bc_OperatorType Type;
        bc_Vector* Parameters;
        struct bc_Enviroment* Env;
} bc_OperatorOverload;

/**
 * 新しい演算子オーバーロードを生成します.
 * @param type
 * @return
 */
bc_OperatorOverload* bc_NewOperatorOverload(bc_OperatorType type);

/**
 * 演算子オーバーロードを実行します.
 * @param self
 * @param fr
 * @param env
 */
void bc_ExecuteOperatorOverload(bc_OperatorOverload* self, struct bc_Frame* fr,
                                struct bc_Enviroment* env);

/**
 * 演算子オーバーロードを解放します.
 * @param self
 */
void bc_DeleteOperatorOverload(bc_OperatorOverload* self);
#endif
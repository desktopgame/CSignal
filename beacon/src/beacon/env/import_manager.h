//BEGIN-AUTOGENERATED-BLOCK
/**
 * @file import_manager.h
 * @brief インポートの一覧を管理します。
 * @author koya
 * @date 2018/10/31
 */
//END-AUTOGENERATED-BLOCK

#pragma once
#ifndef BEACON_ENV_IMPORT_MANAGER_H
#define BEACON_ENV_IMPORT_MANAGER_H
#include "../util/vector.h"
//#include "virtual_type.h"
//#include "fqcn_cache.h"
struct bc_GenericCache;
struct bc_GenericType;
struct bc_FQCNCache;
struct bc_Namespace;
struct bc_ClassLoader;
struct bc_ImportInfo;
struct CallContext;

/**
 * あるファイルが参照しているファイルの一覧を管理します.
 */
typedef struct bc_ImportManager {
	Vector* Items;
} bc_ImportManager;

/**
 * インポートマネージャを作成します.
 * @return
 */
bc_ImportManager* bc_NewImportManager();

/**
 * 指定のクラスローダをインポートの一覧に含めます.
 * @param self
 * @param target
 * @return
 */
struct bc_ImportInfo* bc_ImportImportManager(bc_ImportManager* self, struct bc_ClassLoader* target);

/**
 * 既に読み込まれたなら true.
 * @param self
 * @param index
 * @return
 */
bool bc_IsLoadedImportManager(bc_ImportManager* self, int index);

/**
 * 指定の名前から型を解決します.
 * @param self
 * @param scope
 * @param fqcn
 * @param cctx
 * @return 解決出来なかったなら NULL を返します.
 */
struct bc_GenericType* bc_ResolveImportManager(struct bc_Namespace* scope, struct bc_GenericCache* fqcn, struct CallContext* cctx);

/**
 * 指定の名前から型を解決します.
 * @param self
 * @param scope
 * @param fqcn
 * @param cctx
 * @return 解決出来なかったなら NULL を返します.
 */
struct bc_GenericType* bc_ResolvefImportManager(struct bc_Namespace* scope, struct bc_FQCNCache* fqcn, struct CallContext* cctx);

/**
 * インポートマネージャを開放します.
 * @param self
 */
void bc_DeleteImportManager(bc_ImportManager* self);
#endif // !SIGNAL_ENV_IMPORT_MANAGER_H

//BEGIN-AUTOGENERATED-BLOCK
/**
 * @file mem.h
 * @brief malloc/realloc/freeのラッパーを定義します。
 * @author koya
 * @date 2018/10/31
 */
//END-AUTOGENERATED-BLOCK

#pragma once
#ifndef BEACON_ENV_MEM_H
#define BEACON_ENV_MEM_H
#include <stdlib.h>
#include <stdbool.h>
#include <stdio.h>
#if defined(_MSC_VER)
#include <crtdbg.h>
#endif

//#define mem_malloc(size, file, line) (malloc(size))

#if (defined(_MSC_VER) && defined(_DEBUG))
	#define NON_NULL(m) (m)
	#define MEM_MALLOC(size) (_malloc_dbg(size,_NORMAL_BLOCK,__FILE__,__LINE__))
	#define MEM_FREE(size) (_free_dbg(size, _NORMAL_BLOCK))
	#define MEM_REALLOC(block, size) (_realloc_dbg(block, size, _NORMAL_BLOCK, __FILE__, __LINE__))
	#define MEM_MARK(block, size) ((void)0)
#elif defined(DEBUG)
	#undef mem_malloc
	#define mem_malloc(size, file, line) (bc_MXMalloc(size, file, line))
	#define NON_NULL(m) (m)
	#define MEM_MALLOC(size) (bc_MXMalloc(size, __FILE__, __LINE__))
	#define MEM_FREE(size) (bc_MXFree(size, __FILE__, __LINE__))
	#define MEM_REALLOC(block, size) (bc_MXRealloc(block, size, __FILE__, __LINE__))
	#define MEM_MARK(block, size) ((void)0)
#else
	#undef mem_malloc
	#define mem_malloc(size, file, line) (bc_MXMalloc(size, file, line))
	#define NON_NULL(m) (m)
	#define MEM_MALLOC(size) (SafeMalloc(size))
	#define MEM_FREE(size) (free(size))
	#define MEM_REALLOC(block, size) (SafeRealloc(block, size))
	#define MEM_MARK(block, size) ((void)0)
#endif

typedef struct bc_Slot {
	size_t Size;
	void* UserArea;
	const char* FileName;
	int Lineno;
	int Count;
	struct bc_Slot* Next;
} bc_Slot;

void bc_InitMX();

#define bc_Malloc(size) (bc_MXMalloc(size, __FILE__, __LINE__))
void* bc_MXMalloc(size_t size, const char* filename, int lineno);

#define bc_Realloc(block, size) (bc_MXRealloc(block, size, __FILE__, __LINE__))
void* bc_MXRealloc(void* block, size_t size, const char* filename, int lineno);

#define bc_Free(block) (bc_MXFree(block, __FILE__, __LINE__))
void bc_MXFree(void* block, const char* filename, int lineno);

void* bc_MXBind(const void* block,size_t size,  const char* filename, int lineno);

void bc_MXBreak(int index);

void bc_DestroyMX();

/**
 * メモリを指定のサイズ分確保して返します。
 * 確保できない場合には abort() します。
 * @param size
 * @return
 */
void* SafeMalloc(size_t size);

/**
 * メモリを指定のサイズ分確保して返します。
 * 確保できない場合には abort() します。
 * @param block
 * @paran new_size
 * @return
 */
void* SafeRealloc(void* block, size_t new_size);
#endif // !SIGNAL_ENV_MEM_H

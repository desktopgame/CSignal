$$SET root compilation_unit
$$SET top_level program

;;
;;top_levelのリスト{{{
;;
root
	: init_decl body_decl
	| root body_decl
	| error '\n'
	{
		yyclearin;
	}
	;
;;
;;}}}
;;

init_decl
	: /* empty */
	| import_list
	{
		ast_compile_entry($1);
	}
	;
body_decl
	: stmt
	{
		ast_compile_entry($1);
	}
	| namespace_decl
	{
		ast_compile_entry($1);
	}
	| function_define
	{
		ast_compile_entry($1);
	}
	;
;;
;;名前空間の定義{{{
;;
namespace_decl
	: NAMESPACE namespace_path namespace_body
	{
		$$ = ast_new_namespace_decl($2, $3);
	}
	;
;;
;;}}}
;;

;;
;;名前空間の内側に定義できる要素{{{
;;
namespace_body
	: LCB namespace_member_decl_optional RCB
	{
		$$ = $2
	}
	;
;;
;;}}}
;;

;;
;;型宣言{{{
;;
namespace_member_decl
	: NAMESPACE namespace_path namespace_body
	{
		$$ = ast_new_namespace_namespace_decl($2, $3);
	}
	| abstract_class_decl
	| class_decl
	| interface_decl
	| enum_decl
	;
;;
;;}}}
;;

;;
;;型宣言のリスト{{{
;;
namespace_member_decl_list
	: namespace_member_decl
	{
		$$ = $1
	}
	| namespace_member_decl_list namespace_member_decl
	{
		$$ = ast_new_namespace_member_decl_list($1, $2);
	}
	;
;;
;;}}}
;;

;;
;;名前空間の宣言(空){{{
;;
namespace_member_decl_optional
	: /* empty */
	{
		$$ = ast_new_blank();
	}
	| namespace_member_decl_list
	;
;;
;;}}}
;;

;;
;;名前空間に指定できる . 区切りのパス{{{
;;
namespace_path
	: IDENT
	{
		$$ = ast_new_namespace_path($1);
	}
	| namespace_path COLO_COLO IDENT
	{
		$$ = ast_new_namespace_path_list($1, $3);
	}
	;
;;
;;}}}
;;

import_list
	: import
	| import_list import
	{
		$$ = ast_new_import_decl_list($2, $1);
	}
	;

;;
;;import signal.lang のようなインポートの宣言{{{
;;
import
	: IMPORT STRING_LITERAL
	{
		$$ = ast_new_import_decl(ast_new_import_path($2));
	}
	;
;;
;;}}}
;;

;;
;;Name<T> や Name<in T, out R>など{{{
;;
$$SET __BODY type_parameter_group
parameterized_typename
	: IDENT __BODY
	{
		$$ = ast_new_parameterized_typename($1, $2);
	}
	;
$$REM __BODY
;;
;;}}}
;;

;;
;;<T> や <in T, out R> など{{{
;;
$$SET __LIST type_parameter_list
type_parameter_group
	: /* empty */
	{
		$$ = ast_new_blank();
	}
	| LSB __LIST RSB
	{
		$$ = $2;
	}
	;
$$REM __LIST
;;
;;}}}
;;

;;
;;T や K, Vなど{{{
;;
$$SET __LIST type_parameter_list
$$SET __ENTRY type_parameter
__LIST
	: __ENTRY
	{
		$$ = $1;
	}
	| __LIST COMMA __ENTRY
	{
		$$ = ast_new_type_parameter_list($3, $1);
	}
	;
$$REM __LIST __ENTRY
;;
;;}}}
;;

;;
;;T in T out R など{{{
;;
type_parameter
	: IDENT
	{
		$$ = ast_new_type_parameter($1, ast_new_blank());
	}
	;
;;
;;}}}
;;
;;
;;クラス宣言{{{
;;
abstract_class_decl
	: ABSTRACT CLASS parameterized_typename LCB access_member_tree_opt RCB
	{
		$$ = ast_new_abstract_class_decl($3, ast_new_blank(), $5);
	}
	| ABSTRACT CLASS parameterized_typename COLON typename_list LCB access_member_tree_opt RCB
	{
		$$ = ast_new_abstract_class_decl($3, $5, $7);
	}
	;
;;
;;}}}
;;
;;
;;クラス宣言{{{
;;
class_decl
	: CLASS parameterized_typename LCB access_member_tree_opt RCB
	{
		$$ = ast_new_class_decl($2, ast_new_blank(), $4);
	}
	| CLASS parameterized_typename COLON typename_list LCB access_member_tree_opt RCB
	{
		$$ = ast_new_class_decl($2, $4, $6);
	}
	;
;;
;;}}}
;;

;;
;;列挙宣言{{{
;;
enum_decl
	: ENUM IDENT LCB ident_list RCB
	{
		$$ = ast_new_enum_decl($2, $4);
	}
	| ENUM IDENT LCB ident_list COMMA RCB
	{
		$$ = ast_new_enum_decl($2, $4);
	}
	;
;;
;;}}}
;;

;;
;;インターフェイス宣言{{{
;;
interface_decl
	: INTERFACE parameterized_typename LCB access_member_tree_opt RCB
	{
		$$ = ast_new_interface_decl($2, ast_new_blank(), $4);
	}
	| INTERFACE parameterized_typename COLON typename_list LCB access_member_tree_opt RCB
	{
		$$ = ast_new_interface_decl($2, $4, $6);
	}
	;
;;
;;}}}
;;

access_member_tree_opt
	: /* empty */
	{
		$$ = ast_new_blank();
	}
	| access_member_tree
	;

;;
;;"アクセス修飾子と'メンバー宣言のリスト'のペアのリスト"のリスト{{{
;;
access_member_tree
	: access_member_list
	| access_member_tree access_member_list
	{
		$$ = ast_new_access_member_tree($1, $2);
	}
	;
;;
;;}}}
;;

;;
;;アクセス修飾子と"メンバー宣言のリスト"のペアのリスト{{{
;;
access_member_list
	: access_level_T COLON member_define_list
	{
		$$ = ast_new_access_member_list($1, $3);
	}
	;
;;
;;}}}
;;

;;
;;メンバー宣言のリスト{{{
;;
member_define_list
	: member_define
	{
		$$ = ast_new_member_decl($1);
	}
	| member_define_list member_define
	{
		$$ = ast_new_member_decl_list($1, ast_new_member_decl($2));
	}
	;
;;
;;}}}
;;

;;
;;メンバー宣言{{{
;;
member_define
	: constructor_define
	| method_define
	| operator_define
	| field_define
	| prop_define
	;
;;
;;}}}
;;

;;
;;コンストラクタ宣言{{{
;;
constructor_define
	: DEF NEW LRB parameter_list RRB constructor_chain_optional scope_optional
	{
		$$ = ast_new_constructor_decl($4, $6, $7);
	}
	| DEF NEW LRB RRB constructor_chain_optional scope_optional
	{
		$$ = ast_new_constructor_decl(ast_new_blank(), $5, $6);
	}
	;
;;
;;}}}
;;

;;
;;コンストラクタの連鎖{{{
;;
constructor_chain
	: COLON constructor_chain_type_T LRB argument_list RRB
	{
		$$ = ast_new_constructor_chain($2, $4);
	}
	| COLON constructor_chain_type_T LRB RRB
	{
		$$ = ast_new_constructor_chain($2, ast_new_blank());
	}
	;
;;
;;}}}
;;

;;
;;コンストラクタの連鎖の種類{{{
;;
constructor_chain_type_T
	: SUPER_TOK
	{
		$$ = chain_type_super;
	}
	| THIS_TOK
	{
		$$ = chain_type_this;
	}
	;
;;
;;}}}
;;

;;
;;コンストラクタの連鎖(空){{{
;;
constructor_chain_optional
	: /* empty */
	{
		$$ = ast_new_blank();
	}
	| constructor_chain
	;
;;
;;}}}
;;

;;
;;関数宣言{{{
;;
function_define
	: DEF IDENT LRB parameter_list RRB ARROW typename_T scope_optional
	{
		$$ = ast_new_function_decl($2, $4, $8, $7);
	}
	| DEF IDENT LRB RRB ARROW typename_T scope_optional
	{
		$$ = ast_new_function_decl_empty_params($2, $7, $6);
	}
	;
;;
;;}}}
;;

;;
;;メソッド宣言{{{
;;
$$SET __GENERIC type_parameter_group
method_define
;;modifier あり
	: DEF modifier_type_T_list IDENT __GENERIC LRB parameter_list RRB ARROW typename_T scope_optional
	{
		$$ = ast_new_method_decl($2, $3, $4, $6, $10, $9);
	}
	| DEF modifier_type_T_list IDENT __GENERIC LRB RRB ARROW typename_T scope_optional
	{
		$$ = ast_new_method_decl_empty_params($2, $3, $4, $9, $8);
	}
;;modifier なし
	| DEF IDENT __GENERIC LRB parameter_list RRB ARROW typename_T scope_optional
	{
		$$ = ast_new_method_decl(ast_new_modifier(modifier_none), $2, $3, $5, $9, $8);
	}
	| DEF IDENT __GENERIC LRB RRB ARROW typename_T scope_optional
	{
		$$ = ast_new_method_decl_empty_params(ast_new_modifier(modifier_none), $2, $3, $8, $7);
	}
	;
$$REM __GENERIC
;;
;;}}}
;;

;;
;;オペレーター宣言{{{
;;
operator_define
	;;operator +(Param p, Param p) -> Param { ... }
	;;+-*/%
	: OPERATOR ADD LRB parameter_list RRB ARROW typename_T scope_optional
	{
		$$ = ast_new_operator_overload(operator_add, $4, $8, $7);
	}
	| OPERATOR SUB LRB parameter_list RRB ARROW typename_T scope_optional
	{
		$$ = ast_new_operator_overload(operator_sub, $4, $8, $7);
	}
	| OPERATOR MUL LRB parameter_list RRB ARROW typename_T scope_optional
	{
		$$ = ast_new_operator_overload(operator_mul, $4, $8, $7);
	}
	| OPERATOR DIV LRB parameter_list RRB ARROW typename_T scope_optional
	{
		$$ = ast_new_operator_overload(operator_div, $4, $8, $7);
	}
	| OPERATOR MOD LRB parameter_list RRB ARROW typename_T scope_optional
	{
		$$ = ast_new_operator_overload(operator_mod, $4, $8, $7);
	}
	;;> >= < <=
	| OPERATOR GT LRB parameter_list RRB ARROW typename_T scope_optional
	{
		$$ = ast_new_operator_overload(operator_gt, $4, $8, $7);
	}
	| OPERATOR GE LRB parameter_list RRB ARROW typename_T scope_optional
	{
		$$ = ast_new_operator_overload(operator_ge, $4, $8, $7);
	}
	| OPERATOR LT LRB parameter_list RRB ARROW typename_T scope_optional
	{
		$$ = ast_new_operator_overload(operator_lt, $4, $8, $7);
	}
	| OPERATOR LE LRB parameter_list RRB ARROW typename_T scope_optional
	{
		$$ = ast_new_operator_overload(operator_le, $4, $8, $7);
	}
	//== !=
	| OPERATOR EQUAL LRB parameter_list RRB ARROW typename_T scope_optional
	{
		$$ = ast_new_operator_overload(operator_eq, $4, $8, $7);
	}
	| OPERATOR NOTEQUAL LRB parameter_list RRB ARROW typename_T scope_optional
	{
		$$ = ast_new_operator_overload(operator_noteq, $4, $8, $7);
	}
	//| &
	| OPERATOR BIT_OR LRB parameter_list RRB ARROW typename_T scope_optional
	{
		$$ = ast_new_operator_overload(operator_bit_or, $4, $8, $7);
	}
	| OPERATOR BIT_AND LRB parameter_list RRB ARROW typename_T scope_optional
	{
		$$ = ast_new_operator_overload(operator_bit_and, $4, $8, $7);
	}
	//|| &&
	| OPERATOR LOGIC_OR LRB parameter_list RRB ARROW typename_T scope_optional
	{
		$$ = ast_new_operator_overload(operator_logic_or, $4, $8, $7);
	}
	| OPERATOR LOGIC_AND LRB parameter_list RRB ARROW typename_T scope_optional
	{
		$$ = ast_new_operator_overload(operator_logic_and, $4, $8, $7);
	}
	//<< >>
	| OPERATOR LSHIFT LRB parameter_list RRB ARROW typename_T scope_optional
	{
		$$ = ast_new_operator_overload(operator_lshift, $4, $8, $7);
	}
	| OPERATOR RSHIFT LRB parameter_list RRB ARROW typename_T scope_optional
	{
		$$ = ast_new_operator_overload(operator_rshift, $4, $8, $7);
	}
	//^
	| OPERATOR EXC_OR LRB parameter_list RRB ARROW typename_T scope_optional
	{
		$$ = ast_new_operator_overload(operator_excor, $4, $8, $7);
	}
	//!
	| OPERATOR NOT LRB RRB ARROW typename_T scope_optional
	{
		$$ = ast_new_operator_overload(operator_not, ast_new_blank(), $7, $6);
	}
	//~
	| OPERATOR CHILDA LRB RRB ARROW typename_T scope_optional
	{
		$$ = ast_new_operator_overload(operator_childa, ast_new_blank(), $7, $6);
	}
	| OPERATOR SUB LRB RRB ARROW typename_T scope_optional
	{
		$$ = ast_new_operator_overload(operator_negative, ast_new_blank(), $7, $6);
	}
	;
;;
;;}}}
;;

;;
;;フィールド宣言{{{
;;
field_define
	: modifier_type_T typename_T IDENT SEMI
	{
		$$ = ast_new_field_decl($1, $2, $3);
	}
	| typename_T IDENT SEMI
	{
		$$ = ast_new_field_decl(ast_new_modifier(modifier_none), $1, $2);
	}
	;
;;
;;}}}
;;

;;
;;プロパティ set部分
;;
prop_set
	: DEFSET SEMI
	{
		$$ = ast_new_prop_set(ast_new_blank(), ast_new_blank());
	}
	| DEFSET scope
	{
		$$ = ast_new_prop_set(ast_new_blank(), $2);
	}
	| access_level_T DEFSET SEMI
	{
		$$ = ast_new_prop_set(ast_new_access($1), ast_new_blank());
	}
	| access_level_T DEFSET scope
	{
		$$ = ast_new_prop_set(ast_new_access($1), ast_new_blank());
	}
	;

;;
;;プロパティ get部分
;;
prop_get
	: DEFGET SEMI
	{
		$$ = ast_new_prop_get(ast_new_blank(), ast_new_blank());
	}
	| DEFGET scope
	{
		$$ = ast_new_prop_get(ast_new_blank(), $2);
	}
	| access_level_T DEFGET SEMI
	{
		$$ = ast_new_prop_get(ast_new_access($1), ast_new_blank());
	}
	| access_level_T DEFGET scope
	{
		$$ = ast_new_prop_get(ast_new_access($1), ast_new_blank());
	}
	;

;;
;;プロパティの宣言
;;
prop_define
	: PROPERTY modifier_type_T_list typename_T IDENT LCB prop_set prop_get RCB
	{
		$$ = ast_new_prop_decl($2, $3, $4, $6, $7);
	}
	;;| PROPERTY modifier_type_T_list typename_T IDENT LCB prop_get RCB
	;;{
	;;	$$ = ast_new_prop_decl($2, $3, $4, ast_new_blank(), $6);
	;;}
	;;modifierなし
	| PROPERTY typename_T IDENT LCB prop_set prop_get RCB
	{
		$$ = ast_new_prop_decl(ast_new_modifier(modifier_none), $2, $3, $5, $6);
	}
	;;| PROPERTY typename_T IDENT LCB prop_get RCB
	;;{
	;;	$$ = ast_new_prop_decl(ast_new_modifier(modifier_none), $2, $3, ast_new_blank(), $5);
	;;}
	;

modifier_type_T_list
	: modifier_type_T
	{
		$$ = $1;
	}
	| modifier_type_T_list modifier_type_T
	{
		$$ = ast_new_modifier_list($2, $1);
	}
	;

;;
;;修飾子{{{
;;
modifier_type_T
	: STATIC
	{
		$$ = ast_new_modifier(modifier_static);
	}
	| NATIVE
	{
		$$ = ast_new_modifier(modifier_native);
	}
	| ABSTRACT
	{
		$$ = ast_new_modifier(modifier_abstract);
	}
	| OVERRIDE
	{
		$$ = ast_new_modifier(modifier_override);
	}
	;
;;
;;}}}
;;

;;
;;アクセスレベル{{{
;;
access_level_T
	: PUBLIC
	{
		$$ = access_public;
	}
	| PRIVATE
	{
		$$ = access_private;
	}
	| PROTECTED
	{
		$$ = access_protected;
	}
	;
;;
;;}}}
;;

;;
;;識別子のリスト{{{
;;
ident_list
	: IDENT
	{
		$$ = ast_new_identifier($1);
	}
	| ident_list COMMA IDENT
	{
		$$ = ast_new_identifier_list($3, $1);
	}
	;
;;
;;}}}
;;

;;
;;仮引数のリスト{{{
;;
parameter_list
	: typename_T IDENT
	{
		$$ = ast_new_parameter($1, $2);
	}
	| parameter_list COMMA typename_T IDENT
	{
		$$ = ast_new_parameter_list($3, $4, $1)
	}
	;
;;
;;}}}
;;

;;
;;実引数のリスト{{{
;;
argument_list
	: expression
	{
		$$ = ast_new_argument($1);
	}
	;;`(Int a) -> Void { }
	| QUOTE LRB parameter_list RRB ARROW typename_T scope
	{
		$$ = ast_new_lambda($3, $6, $7);
	}
	| argument_list COMMA expression
	{
		$$ = ast_new_argument_list(ast_new_argument($3), $1);
	}
	;
;;
;;}}}
;;

;;
;;型名のグループ{{{
;;
typename_group
	: /* empty */
	{
		$$ = ast_new_blank();
	}
	| LSB typename_list RSB
	{
		$$ = $2;
	}
	;
;;
;;}}}
;;

;;
;;型名のリスト{{{
;;
typename_list
	: typename_T
	{
		$$ = $1;
	}
	| typename_list COMMA typename_T
	{
		$$ = ast_new_typename_list($3, $1);
	}
	;
;;
;;}}}
;;

;;
;;型名{{{
;;
typename_T
	: fqcn_part typename_group
	{
		$$ = ast_new_typename($1, $2);
	}
	;
;;
;;型名}}}
;;

;;
;;FullQualityClassName{{{
;;
fqcn_part
	: IDENT
	{
		$$ = ast_new_fqcn_part($1);
	}
	| fqcn_part COLO_COLO IDENT
	{
		$$ = ast_new_fqcn_part_list(ast_new_fqcn_part($3), $1);
	}
	;
;;
;;}}}
;;

;;ここにfactor
;;ここにstmt


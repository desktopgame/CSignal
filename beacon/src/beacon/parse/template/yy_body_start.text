$$SET root compilation_unit
$$SET top_level program

;;
;;top_levelのリスト{{{
;;
root
	: top_level
	| error '\n'
	{
$$TNO	$$ = ast_new_blank();
	}
	;
;;
;;}}}
;;

;;
;;トップレベルに定義できる要素{{{
;;
top_level
	: stmt_list
	{
$$TNO		ast_compile_entry($1);
	}
	| import
	{
$$TNO		ast_compile_entry($1);
	}
	| namespace_decl
	{
$$TNO		ast_compile_entry($1);
	}
	| function_define
	{
$$TNO		ast_compile_entry($1);
	}
	;
;;
;;}}}
;;

;;
;;名前空間の定義{{{
;;
namespace_decl
	: NAMESPACE namespace_path namespace_body
	{
$$TNO		$$ = ast_new_namespace_decl($2, $3);
	}
	;
;;
;;}}}
;;

;;
;;名前空間の内側に定義できる要素{{{
;;
namespace_body
	: LCB namespace_member_decl_optional RCB
	{
$$TNO		$$ = $2
	}
	;
;;
;;}}}
;;

;;
;;型宣言{{{
;;
namespace_member_decl
	: NAMESPACE namespace_path namespace_body
	{
$$TNO		$$ = ast_new_namespace_namespace_decl($2, $3);
	}
	| class_decl
	| interface_decl
	| enum_decl
	;
;;
;;}}}
;;

;;
;;型宣言のリスト{{{
;;
namespace_member_decl_list
	: namespace_member_decl
	{
$$TNO		$$ = $1
	}
	| namespace_member_decl_list namespace_member_decl
	{
$$TNO		$$ = ast_new_namespace_member_decl_list($1, $2);
	}
	;
;;
;;}}}
;;

;;
;;名前空間の宣言(空){{{
;;
namespace_member_decl_optional
	: /* empty */
	{
$$TNO		$$ = ast_new_blank();
	}
	| namespace_member_decl_list
	;
;;
;;}}}
;;

;;
;;名前空間に指定できる . 区切りのパス{{{
;;
namespace_path
	: IDENT
	{
$$TNO		$$ = ast_new_namespace_path($1);
	}
	| namespace_path DOT IDENT
	{
$$TNO		$$ = ast_new_namespace_path_list($1, $3);
	}
	;
;;
;;}}}
;;

;;
;;import signal.lang のようなインポートの宣言{{{
;;
import
	: IMPORT STRING_LITERAL
	{
$$TNO		$$ = ast_new_import_decl(ast_new_import_path($2));
	}
	;
;;
;;}}}
;;

;;
;;Name<T> や Name<in T, out R>など{{{
;;
$$SET __BODY type_parameter_group
parameterized_typename
	: IDENT __BODY
	{
$$TNO		$$ = ast_new_parameterized_typename($1, $2);
	}
	;
$$REM __BODY
;;
;;}}}
;;

;;
;;<T> や <in T, out R> など{{{
;;
$$SET __LIST type_parameter_list
type_parameter_group
	: /* empty */
	{
$$TNO		$$ = ast_new_blank();
	}
	| LT __LIST GT
	{
$$TNO		$$ = $2;
	}
	;
$$REM __LIST
;;
;;}}}
;;

;;
;;T や K, Vなど{{{
;;
$$SET __LIST type_parameter_list
$$SET __ENTRY type_parameter
__LIST
	: __ENTRY
	{
$$TNO		$$ = $1;
	}
	| __LIST COMMA __ENTRY
	{
$$TNO		$$ = ast_new_type_parameter_list($3, $1);
	}
	;
$$REM __LIST __ENTRY
;;
;;}}}
;;

;;
;;T in T out R など{{{
;;
type_parameter
	: IDENT type_parameter_rule_list
	{
$$TNO		$$ = ast_new_type_parameter($1, $2);
	}
	| IN IDENT type_parameter_rule_list
	{
$$TNO		$$ = ast_new_type_in_parameter($2, $3);
	}
	| OUT IDENT type_parameter_rule_list
	{
$$TNO		$$ = ast_new_type_out_parameter($2, $3);
	}
	;
;;
;;}}}
;;

;;
;;型宣言に対する制約{{{
;;
type_parameter_rule_list
	: /* empty */
	{
$$TNO		$$ = ast_new_blank();
	}
	| LRB typename_list RRB
	{
$$TNO		$$ = ast_new_type_parameter_rule_list($2);
	}
	;
;;
;;}}}
;;

;;
;;クラス宣言{{{
;;
class_decl
	: CLASS parameterized_typename LCB access_member_tree_opt RCB
	{
$$TNO		$$ = ast_new_class_decl($2, ast_new_blank(), $4);
	}
	| CLASS parameterized_typename COLON typename_list LCB access_member_tree_opt RCB
	{
$$TNO		$$ = ast_new_class_decl($2, $4, $6);
	}
	;
;;
;;}}}
;;

;;
;;列挙宣言{{{
;;
enum_decl
	: ENUM IDENT LCB ident_list RCB
	{
$$TNO		$$ = ast_new_enum_decl($2, $4);
	}
	| ENUM IDENT LCB ident_list COMMA RCB
	{
$$TNO		$$ = ast_new_enum_decl($2, $4);
	}
	;
;;
;;}}}
;;

;;
;;インターフェイス宣言{{{
;;
interface_decl
	: INTERFACE parameterized_typename LCB access_member_tree_opt RCB
	{
$$TNO		$$ = ast_new_interface_decl($2, ast_new_blank(), $4);
	}
	| INTERFACE parameterized_typename COLON typename_list LCB access_member_tree_opt RCB
	{
$$TNO		$$ = ast_new_interface_decl($2, $4, $6);
	}
	;
;;
;;}}}
;;

access_member_tree_opt
	: /* empty */
	{
$$TNO		$$ = ast_new_blank();
	}
	| access_member_tree
	;

;;
;;"アクセス修飾子と'メンバー宣言のリスト'のペアのリスト"のリスト{{{
;;
access_member_tree
	: access_member_list
	| access_member_tree access_member_list
	{
$$TNO		$$ = ast_new_access_member_tree($1, $2);
	}
	;
;;
;;}}}
;;

;;
;;アクセス修飾子と"メンバー宣言のリスト"のペアのリスト{{{
;;
access_member_list
	: access_level_T COLON member_define_list
	{
$$TNO		$$ = ast_new_access_member_list($1, $3);
	}
	;
;;
;;}}}
;;

;;
;;メンバー宣言のリスト{{{
;;
member_define_list
	: member_define
	{
$$TNO		$$ = ast_new_member_decl($1);
	}
	| member_define_list member_define
	{
$$TNO		$$ = ast_new_member_decl_list($1, ast_new_member_decl($2));
	}
	;
;;
;;}}}
;;

;;
;;メンバー宣言{{{
;;
member_define
	: constructor_define
	| method_define
	| field_define
	;
;;
;;}}}
;;

;;
;;コンストラクタ宣言{{{
;;
constructor_define
	: CTOR NEW LRB parameter_list RRB constructor_chain_optional scope_optional
	{
$$TNO		$$ = ast_new_constructor_decl($4, $6, $7);
	}
	| CTOR NEW LRB RRB constructor_chain_optional scope_optional
	{
$$TNO		$$ = ast_new_constructor_decl(ast_new_blank(), $5, $6);
	}
	;
;;
;;}}}
;;

;;
;;コンストラクタの連鎖{{{
;;
constructor_chain
	: COLON constructor_chain_type_T LRB argument_list RRB
	{
$$TNO		$$ = ast_new_constructor_chain($2, $4);
	}
	| COLON constructor_chain_type_T LRB RRB
	{
$$TNO		$$ = ast_new_constructor_chain($2, ast_new_blank());
	}
	;
;;
;;}}}
;;

;;
;;コンストラクタの連鎖の種類{{{
;;
constructor_chain_type_T
	: SUPER
	{
$$TNO		$$ = chain_type_super;
	}
	| THIS
	{
$$TNO		$$ = chain_type_this;
	}
	;
;;
;;}}}
;;

;;
;;コンストラクタの連鎖(空){{{
;;
constructor_chain_optional
	: /* empty */
	{
$$TNO		$$ = ast_new_blank();
	}
	| constructor_chain
	;
;;
;;}}}
;;

;;
;;関数宣言{{{
;;
function_define
	: DEF IDENT LRB parameter_list RRB ARROW typename_T scope_optional
	{
$$TNO		$$ = ast_new_function_decl($2, $4, $8, $7);
	}
	| DEF IDENT LRB RRB ARROW typename_T scope_optional
	{
$$TNO		$$ = ast_new_function_decl_empty_params($2, $7, $6);
	}
	;
;;
;;}}}
;;

;;
;;メソッド宣言{{{
;;
$$SET __GENERIC type_parameter_group
method_define
	: modifier_type_T DEF IDENT __GENERIC LRB parameter_list RRB ARROW typename_T scope_optional
	{
$$TNO		$$ = ast_new_method_decl($1, $3, $4, $6, $10, $9);
	}
	| modifier_type_T DEF IDENT __GENERIC LRB RRB ARROW typename_T scope_optional
	{
$$TNO		$$ = ast_new_method_decl_empty_params($1, $3, $4, $9, $8);
	}
	;
$$REM __GENERIC
;;
;;}}}
;;

;;
;;フィールド宣言{{{
;;
field_define
	: modifier_type_T typename_T IDENT SEMI
	{
$$TNO		$$ = ast_new_field_decl($1, $2, $3);
	}
	;
;;
;;}}}
;;

;;
;;修飾子{{{
;;
modifier_type_T
	: /* empty */
	{
$$TNO		$$ = modifier_none;
	}
	| STATIC NATIVE
	{
$$TNO		$$ = modifier_static_native();
	}
	| NATIVE STATIC
	{
$$TNO		$$ = modifier_static_native();
	}
	| STATIC
	{
$$TNO		$$ = modifier_static;
	}
	| NATIVE
	{
$$TNO		$$ = modifier_native;
	}
	;
;;
;;}}}
;;

;;
;;アクセスレベル{{{
;;
access_level_T
	: PUBLIC
	{
$$TNO		$$ = access_public;
	}
	| PRIVATE
	{
$$TNO		$$ = access_private;
	}
	| PROTECTED
	{
$$TNO		$$ = access_protected;
	}
	;
;;
;;}}}
;;

;;
;;識別子のリスト{{{
;;
ident_list
	: IDENT
	{
$$TNO		$$ = ast_new_identifier($1);
	}
	| ident_list COMMA IDENT
	{
$$TNO		$$ = ast_new_identifier_list($3, $1);
	}
	;
;;
;;}}}
;;

;;
;;仮引数のリスト{{{
;;
parameter_list
	: typename_T IDENT
	{
$$TNO		$$ = ast_new_parameter($1, $2);
	}
	| parameter_list COMMA typename_T IDENT
	{
$$TNO		$$ = ast_new_parameter_list($3, $4, $1)
	}
	;
;;
;;}}}
;;

;;
;;実引数のリスト{{{
;;
argument_list
	: expression
	{
$$TNO		$$ = ast_new_argument($1);
	}
	| argument_list COMMA expression
	{
$$TNO		$$ = ast_new_argument_list(ast_new_argument($3), $1);
	}
	;
;;
;;}}}
;;

;;
;;型名のグループ{{{
;;
typename_group
	: /* empty */
	{
$$TNO		$$ = ast_new_blank();
	}
	| '<' typename_list '>'
	{
$$TNO		$$ = $2;
	}
	;
;;
;;}}}
;;

;;
;;型名のリスト{{{
;;
typename_list
	: typename_T
	{
$$TNO		$$ = $1;
	}
	| typename_list COMMA typename_T
	{
$$TNO		$$ = ast_new_typename_list($3, $1);
	}
	;
;;
;;}}}
;;

;;
;;型名{{{
;;
typename_T
	: fqcn_part typename_group
	{
$$TNO		$$ = ast_new_typename($1, $2);
	}
	;
;;
;;型名}}}
;;

;;
;;FullQualityClassName{{{
;;
fqcn_part
	: IDENT
	{
$$TNO		$$ = ast_new_fqcn_part($1);
	}
	| fqcn_part COLO_COLO IDENT
	{
$$TNO		$$ = ast_new_fqcn_part_list(ast_new_fqcn_part($3), $1);
	}
	;
;;
;;}}}
;;

;;ここにfactor
;;ここにstmt


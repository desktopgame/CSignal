expression
	: LRB expression RRB
	{
		$$ = $2;
	}
	| expression_nobrace
	;
$$SET __SELF expression
expression_nobrace
	: primary
	| ADD __SELF %prec POSITIVE
	{
		$$ = ast_new_unary(ast_pos, $2);
	}
	| SUB __SELF %prec NEGATIVE
	{
		$$ = ast_new_unary(ast_neg, $2);
	}
	| __SELF ADD __SELF
	{
		$$ = ast_new_binary(ast_add, $1, $3);
	}
	| __SELF SUB __SELF
	{
		$$ = ast_new_binary(ast_sub, $1, $3);
	}
	| __SELF MUL __SELF
	{
		$$ = ast_new_binary(ast_mul, $1, $3);
	}
	| __SELF DIV __SELF
	{
		$$ = ast_new_binary(ast_div, $1, $3);
	}
	| __SELF MOD __SELF
	{
		$$ = ast_new_binary(ast_mod, $1, $3);
	}
	| __SELF BIT_OR __SELF
	{
		$$ = ast_new_binary(ast_bit_or, $1, $3);
	}
	| __SELF EQUAL __SELF
	{
		$$ = ast_new_binary(ast_equal, $1, $3);
	}
	| __SELF NOTEQUAL __SELF
	{
		$$ = ast_new_binary(ast_notequal, $1, $3);
	}
	| __SELF BIT_AND __SELF
	{
		$$ = ast_new_binary(ast_bit_and, $1, $3);
	}
	| __SELF EXC_OR __SELF
	{
		$$ = ast_new_binary(ast_exc_or, $1, $3);
	}
	| __SELF LOGIC_OR __SELF
	{
		$$ = ast_new_binary(ast_logic_or, $1, $3);
	}
	| __SELF LOGIC_AND __SELF
	{
		$$ = ast_new_binary(ast_logic_and, $1, $3);
	}
	| __SELF ASSIGN __SELF
	{
		$$ = ast_new_binary(ast_assign, $1, $3);
	}
	| __SELF ADD_ASSIGN __SELF
	{
		$$ = ast_new_binary(ast_add_assign, $1, $3);
	}
	| __SELF SUB_ASSIGN __SELF
	{
		$$ = ast_new_binary(ast_sub_assign, $1, $3);
	}
	| __SELF MUL_ASSIGN __SELF
	{
		$$ = ast_new_binary(ast_mul_assign, $1, $3);
	}
	| __SELF DIV_ASSIGN __SELF
	{
		$$ = ast_new_binary(ast_div_assign, $1, $3);
	}
	| __SELF MOD_ASSIGN __SELF
	{
		$$ = ast_new_binary(ast_mod_assign, $1, $3);
	}
	| __SELF AND_ASSIGN __SELF
	{
		$$ = ast_new_binary(ast_and_assign, $1, $3);
	}
	| __SELF OR_ASSIGN __SELF
	{
		$$ = ast_new_binary(ast_or_assign, $1, $3);
	}
	| __SELF EXC_OR_ASSIGN __SELF
	{
		$$ = ast_new_binary(ast_exc_or_assign, $1, $3);
	}
	| __SELF LSHIFT_ASSIGN __SELF
	{
		$$ = ast_new_binary(ast_lshift_assign, $1, $3);
	}
	| __SELF RSHIFT_ASSIGN __SELF
	{
		$$ = ast_new_binary(ast_rshift_assign, $1, $3);
	}
	| __SELF GT __SELF
	{
		$$ = ast_new_binary(ast_gt, $1, $3);
	}
	| __SELF GE __SELF
	{
		$$ = ast_new_binary(ast_ge, $1, $3);
	}
	| __SELF LT __SELF
	{
		$$ = ast_new_binary(ast_lt, $1, $3);
	}
	| __SELF LE __SELF
	{
		$$ = ast_new_binary(ast_le, $1, $3);
	}
	| __SELF LSHIFT __SELF
	{
		$$ = ast_new_binary(ast_lshift, $1, $3);
	}
	| __SELF RSHIFT __SELF
	{
		$$ = ast_new_binary(ast_rshift, $1, $3);
	}
	| __SELF DOT IDENT
	{
		$$ = ast_new_blank();
	}
	| __SELF AS typename_T
	{
		$$ = ast_new_as($1, $3);
	}
	| CHILDA __SELF
	{
		$$ = ast_new_unary(ast_childa, $2);
	}
	| NOT __SELF
	{
		$$ = ast_new_unary(ast_not, $2);
	}
$$-
	| INC expression_nobrace %prec PRE_INC
	{
		$$ = ast_new_blank();
	}
	| DEC expression_nobrace %prec PRE_DEC
	{
		$$ = ast_new_blank();
	}
	| expression_nobrace INC %prec POST_INC
	{
		$$ = ast_new_blank();
	}
	| expression_nobrace DEC %prec POST_DEC
	{
		$$ = ast_new_blank();
	}
-$$
	| expression_nobrace LRB RRB %prec FUNCCALL
	{
		$$ = ast_new_blank();
	}
	| expression_nobrace LRB argument_list RRB %prec FUNCCALL
	{
		$$ = ast_new_blank();
	}
	| fqcn_part
	| NEW typename_T LRB RRB
	| NEW typename_T LRB argument_list RRB
	;
$$REM __SELF
primary
	: INT
	| DOUBLE
	| CHAR_LITERAL
	| STRING_LITERAL
	| TRUE_TOK
	{
		$$ = ast_new_true();
	}
	| FALSE_TOK
	{
		$$ = ast_new_false();
	}
	| NULL_TOK
	{
		$$ = ast_new_null();
	}
	;

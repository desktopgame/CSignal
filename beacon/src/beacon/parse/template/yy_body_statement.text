

stmt_list
	: stmt
	{
$$TNO		$$ = ast_new_stmt($1);
	}
	| stmt_list stmt
	{
$$TNO		$$ = ast_new_stmt_list($1, $2);
	}
	;
stmt
	: expression stmt_term
	{
$$TNO		$$ = ast_new_proc($1);
	}
	| variable_decl_stmt
	| variable_init_stmt
	| inferenced_type_init_stmt
	| if_stmt
	| while_stmt
	| break_stmt
	| continue_stmt
	| return_stmt
	| throw_stmt
	| try_stmt
	;
variable_decl_stmt
	: typename_T IDENT SEMI
	{
$$TNO		$$ = ast_new_variable_decl($1, $2);
	}
	;
variable_init_stmt
	: typename_T IDENT ASSIGN expression stmt_term
	{
$$TNO		$$ = ast_new_variable_init($1, $2, $4);
	}
	;
inferenced_type_init_stmt
	: VAR IDENT ASSIGN expression stmt_term
	{
$$TNO		$$ = ast_new_inferenced_type_init($2, $4);
	}
	;
if_stmt
	: IF LRB expression RRB scope
	{
$$TNO		$$ = ast_new_if($3, $5);
	}
	| IF LRB expression RRB scope ELSE scope
	{
$$TNO		$$ = ast_new_if_else($3, $5, $7);
	}
	| IF LRB expression RRB scope elif_list
	{
$$TNO		$$ = ast_new_if_elif_list($3, $5, $6);
	}
	| IF LRB expression RRB scope elif_list ELSE scope
	{
$$TNO		$$ = ast_new_if_elif_list_else($3, $5, $6, $8);
	}
	;
elif_list
	: elif
	| elif_list elif
	{
$$TNO		$$ = ast_new_elif_list($1, $2);
	}
	;
elif
	: ELIF LRB expression RRB scope
	{
$$TNO		$$ = ast_new_elif($3, $5);
	}
	;
while_stmt
	: WHILE LRB expression RRB scope_optional
	{
$$TNO		$$ = ast_new_while($3, $5);
	}
	;
break_stmt
	: BREAK stmt_term
	{
$$TNO		$$ = ast_new_break();
	}
	;
continue_stmt
	: CONTINUE stmt_term
	{
$$TNO		$$ = ast_new_continue();
	}
	;
return_stmt
	: RETURN expression stmt_term
	{
$$TNO		$$ = ast_new_return($2);
	}
	;
throw_stmt
	: THROW expression stmt_term
	{
$$TNO		$$ = ast_new_throw($2);
	}
	;
try_stmt
	: TRY scope catch_stmt_list
	{
$$TNO		$$ = ast_new_try($2, $3);
	}
	;
catch_stmt_list
	: catch_stmt
	{
$$TNO		$$ = $1;
	}
	| catch_stmt_list catch_stmt
	{
$$TNO		$$ = ast_new_catch_list($2, $1);
	}
	;
catch_stmt
	: CATCH LRB typename_T IDENT RRB scope
	{
$$TNO		$$ = ast_new_catch($3, $4, $6);
	}
	;



//BEGIN-AUTOGENERATED-BLOCK
/**
 * @file bc_array.h
 * @brief 配列のための機能を提供します。
 * @author koya
 * @date 2018/10/31
 */
//END-AUTOGENERATED-BLOCK

#pragma once
#ifndef BEACON_LIB_SIGNAL_LANG_SG_ARRAY_H
#define BEACON_LIB_SIGNAL_LANG_SG_ARRAY_H
#include "../../bc_library_impl.h"
/**
 * 配列を表すオブジェクトです。
 */
typedef struct Array {
	bc_Object Super;
	bc_Vector* Elements;
} Array;

struct bc_Frame;
struct bc_Type;
struct bc_Object;
struct bc_GenericType;

/**
 * 新しい配列オブジェクトを生成します。
 * @param size
 * @param element_type
 * @return
 */
struct bc_Object* NewArray(int size, struct bc_GenericType* element_type);

/**
 * beacon::lang::Arrayクラスを初期化します.
 */
void InitArray();

/**
 * beacon::lang::Arrayクラスを返します.
 * @return
 */
struct bc_Type* GetArrayType();

/**
 * beacon::lang::Arrayクラスを作成します.
 * @param gtype
 * @param length
 * @param fr
 * @return
 */
struct bc_Object* DynamicNewArray(struct bc_GenericType* gtype, int length, struct bc_Frame* fr);

/**
 * @param arr
 * @param index
 * @param o
 * @return
 */
void SetElementAt(struct bc_Object* arr, int index, struct bc_Object* o);

/**
 * @param arr
 * @param index
 * @return
 */
struct bc_Object* GetElementAt(struct bc_Object* arr, int index);

/**
 * @param arr
 * @return
 */
int GetArrayLength(struct bc_Object* arr);
#endif // !SIGNAL_LIB_SIGNAL_LANG_SG_ARRAY_H

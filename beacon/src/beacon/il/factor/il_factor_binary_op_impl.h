//BEGIN-AUTOGENERATED-BLOCK
/**
 * @file il_factor_binary_op_impl.h
 * @brief ここに概要を記述します
 * @author koya
 * @date 2018/10/31
 */
//END-AUTOGENERATED-BLOCK

#pragma once
#ifndef BEACON_IL_IL_FACTOR_BINARY_OP_H
#define BEACON_IL_IL_FACTOR_BINARY_OP_H
#include "../il_factor_interface.h"
#include "../../ast/operator_type.h"
#include <stdbool.h>

struct ILArithmeticOp;
struct ILLogicOp;
struct ILCompareOp;
struct ILShiftOp;
struct ILExcorOp;

/**
 * 二項演算子を表す要素.
 */
typedef struct ILBinaryOp {
	bc_OperatorType Type;
	bc_OperatorCategory Category;
	ILFactor* Left;
	ILFactor* Right;
	bool IsLoaded;
	union {
		struct ILArithmeticOp* ArithmeticOp;
		struct ILLogicOp* LogicOp;
		struct ILCompareOp* CompareOp;
		struct ILShiftOp* ShiftOp;
		struct ILExcorOp* ExcorOp;
	} Kind;
} ILBinaryOp;

ILFactor* WrapILBinaryOp(ILBinaryOp* self);

ILBinaryOp* NewILBinaryOp(bc_OperatorType type);

void GenerateILBinaryOp(ILBinaryOp* self, bc_Enviroment* env, CallContext* cctx);

void LoadILBinaryOp(ILBinaryOp* self, bc_Enviroment* env, CallContext* cctx);

bc_GenericType* EvalILBinaryOp(ILBinaryOp* self, bc_Enviroment* env, CallContext* cctx);

char* ILBinaryOpToString(ILBinaryOp* self, bc_Enviroment* env);

void DeleteILBinaryOp(ILBinaryOp* self);

char* ILBinaryOpToString_simple(ILBinaryOp* self, bc_Enviroment* env);

bool IsIntIntBinaryOp(ILBinaryOp* self, bc_Enviroment* env, CallContext* cctx);

bool IsDoubleDoubleBinaryOp(ILBinaryOp* self, bc_Enviroment* env, CallContext* cctx);

bool IsBoolBoolBinaryOp(ILBinaryOp* self, bc_Enviroment* env, CallContext* cctx);

bool IsCharCharBinaryOp(ILBinaryOp* self, bc_Enviroment* env, CallContext* cctx);

int GetIndexILBinaryOp(ILBinaryOp* self, bc_Enviroment* env, CallContext* cctx);

int GetIndexILBinaryOp2(ILFactor* receiver, ILFactor* arg, bc_OperatorType otype, bc_Enviroment* env, CallContext* cctx);

bc_GenericType* ApplyILBinaryOp(ILBinaryOp* self, bc_GenericType* gtype, bc_Enviroment* env, CallContext* cctx);
#endif // !SIGNAL_IL_IL_FACTOR_BINARY_OP_H

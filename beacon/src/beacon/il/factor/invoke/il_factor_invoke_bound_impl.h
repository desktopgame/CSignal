// BEGIN-AUTOGENERATED-BLOCK
/**
 * @file il_factor_invoke_bound_impl.h
 * @brief ここに概要を記述します
 * @author koya
 * @date 2018/10/31
 */
// END-AUTOGENERATED-BLOCK

#ifndef BEACON_IL_IL_FACTOR_INVOKE_BOUND_H
#define BEACON_IL_IL_FACTOR_INVOKE_BOUND_H
#include "../../../util/string_pool.h"
#include "../../il_factor_interface.h"
#include "subscript_descriptor.h"

struct bc_Enviroment;
struct bc_GenericType;
struct bc_OperatorOverload;
struct bc_Method;
// binded? bound?

typedef enum bc_BoundInvokeTag {
        BOUND_INVOKE_METHOD_T,
        BOUND_INVOKE_SUBSCRIPT_T,
        BOUND_INVOKE_UNDEFINED_T
} bc_BoundInvokeTag;

typedef struct bc_ILInvokeBound {
        bc_StringView Name;
        bc_Vector* TypeArgs;
        bc_Vector* Arguments;
        union {
                struct bc_Method* Method;
                bc_SubscriptDescriptor Subscript;
        } Kind;
        int Index;
        struct bc_GenericType* Resolved;
        bc_BoundInvokeTag Tag;
} bc_ILInvokeBound;

bc_ILInvokeBound* bc_NewILInvokeBound(bc_StringView namev);

void bc_GenerateILInvokeBound(bc_ILInvokeBound* self, bc_Enviroment* env,
                              bc_CallContext* cctx);

void bc_LoadILInvokeBound(bc_ILInvokeBound* self, bc_Enviroment* env,
                          bc_CallContext* cctx);

struct bc_GenericType* bc_EvalILInvokeBound(bc_ILInvokeBound* self,
                                            bc_Enviroment* env,
                                            bc_CallContext* cctx);

char* bc_ILInvokeBoundToString(bc_ILInvokeBound* self, bc_Enviroment* env);

void bc_DeleteILInvokeBound(bc_ILInvokeBound* self);

struct bc_OperatorOverload* bc_FindSetILInvokeBound(bc_ILInvokeBound* self,
                                                    bc_ILFactor* value,
                                                    bc_Enviroment* env,
                                                    bc_CallContext* cctx,
                                                    int* outIndex);
#endif
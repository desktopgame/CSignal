//BEGIN-AUTOGENERATED-BLOCK
/**
 * @file il_factor_unary_op_impl.h
 * @brief ここに概要を記述します
 * @author koya
 * @date 2018/10/31
 */
//END-AUTOGENERATED-BLOCK

#pragma once
#ifndef BEACON_IL_IL_FACTOR_UNARY_OP_H
#define BEACON_IL_IL_FACTOR_UNARY_OP_H
#include "../il_factor_interface.h"
#include "../../env/generic_type.h"
#include "../../ast/operator_type.h"

//struct opcode_buf;
struct ILChildaOp;
struct ILNegativeOp;
struct ILNotOp;

/**
 * 単項演算子を表す要素.
 */
typedef struct ILUnaryOp {
	bc_OperatorType Type;
	bc_OperatorCategory Category;
	ILFactor* Arg;
	union {
		struct ILChildaOp* ChildaOp;
		struct ILNegativeOp* NegativeOp;
		struct ILNotOp* NotOp;
	} Kind;
} ILUnaryOp;

ILFactor* WrapILUnaryOp(ILUnaryOp* self);

ILUnaryOp* NewILUnaryOp(bc_OperatorType type);

void GenerateILUnaryOp(ILUnaryOp* self, bc_Enviroment* env, CallContext* cctx);

void LoadILUnaryOp(ILUnaryOp* self, bc_Enviroment* env, CallContext* cctx);

bc_GenericType* EvalILUnaryOp(ILUnaryOp* self, bc_Enviroment* env, CallContext* cctx);

char* ILUnaryOpToString(ILUnaryOp* self, bc_Enviroment* env);

void DeleteILUnaryOp(ILUnaryOp* self);

char* ILUnaryOpToString_simple(ILUnaryOp* self, bc_Enviroment* env);

int GetIndexILUnaryOp(ILUnaryOp* self, bc_Enviroment* env, CallContext* cctx);

int GetIndexILUnaryOp2(ILFactor* receiver, bc_OperatorType otype, bc_Enviroment* env, CallContext* cctx);

bc_GenericType* ApplyILUnaryOp(ILUnaryOp* self, bc_GenericType* gtype, bc_Enviroment* env, CallContext* cctx);
#endif // !SIGNAL_IL_IL_FACTOR_UNARY_OP_H

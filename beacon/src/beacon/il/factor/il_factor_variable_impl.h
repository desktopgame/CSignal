//BEGIN-AUTOGENERATED-BLOCK
/**
 * @file il_factor_variable_impl.h
 * @brief ここに概要を記述します
 * @author koya
 * @date 2018/10/31
 */
//END-AUTOGENERATED-BLOCK

#pragma once
#ifndef BEACON_IL_IL_FACTOR_VARIABLE_H
#define BEACON_IL_IL_FACTOR_VARIABLE_H
#include "../il_factor_interface.h"
#include "../../env/fqcn_cache.h"
#include "../../env/generic_type.h"
#include "../../util/vector.h"
#include "variable/il_factor_variable_local_impl.h"
#include "variable/il_factor_variable_static_impl.h"
#include <stdbool.h>

//struct opcode_buf;
struct bc_GenericType;
struct bc_Field;

/**
 * 変数の種類を判別する列挙.
 * beaconの構文定義では、次のものは全て一度 il_Variable として変換されます。
 * <code>
 * variable Namespace::Class variable<|T|> Namespace::Class<|T|>
 * </code>
 */
typedef enum ILVariableType {
	ILVARIABLE_TYPE_LOCAL_T,
	ILVARIABLE_TYPE_STATIC_T,
	ILVARIABLE_TYPE_UNDEFINED_T
} ILVariableType;

/**
 * 変数を表す要素.
 */
typedef struct ILVariable {
	bc_FQCNCache* FQCN;
	bc_Vector* TypeArgs;
	int Index;
	ILVariableType Type;
	union {
		ILVariableLocal* Local;
		ILVariableStatic* Static;
	} Kind;
} ILVariable;

ILFactor* WrapILVariable(ILVariable* self);

#define NewILVariable() (MallocILVariable(__FILE__, __LINE__))
ILVariable* MallocILVariable(const char* filename, int lineno);

void GenerateILVariable(ILVariable* self, bc_Enviroment* env, CallContext* cctx);

void LoadILVariable(ILVariable* self, bc_Enviroment* env, CallContext* cctx);

bc_GenericType* EvalILVariable(ILVariable* self, bc_Enviroment* env, CallContext* cctx);

char* ILVariableToString(ILVariable* self, bc_Enviroment* env);

void DeleteILVariable(ILVariable* self);

#endif // !SIGNAL_IL_IL_FACTOR_VARIABLE_H

//BEGIN-AUTOGENERATED-BLOCK
/**
 * @file il_stmt_try_impl.h
 * @brief ここに概要を記述します
 * @author koya
 * @date 2018/10/31
 */
//END-AUTOGENERATED-BLOCK

#ifndef BEACON_IL_IL_STM_TRY_H
#define BEACON_IL_IL_STM_TRY_H
#include "../../util/vector.h"
#include "../../util/string_pool.h"
#include "../../env/generic_cache.h"
#include "../il_stmt_interface.h"

struct bc_Enviroment;

typedef struct bc_ILTry {
	bc_Vector* Statements;
	bc_Vector* Catches;
} bc_ILTry;

typedef struct bc_ILCatch {
	bc_GenericCache* GCache;
	bc_StringView Name;
	bc_Vector* Statements;
} bc_ILCatch;

bc_ILStatement* bc_WrapILTry(bc_ILTry* self);

bc_ILTry* bc_NewILTry();

bc_ILCatch* bc_NewILCatch(bc_StringView namev);

void bc_GenerateILTry(bc_ILTry* self, bc_Enviroment* env, bc_CallContext* cctx);

void bc_GenerateILCatch(bc_ILCatch* self, bc_Enviroment* env, bc_CallContext* cctx);

void bc_LoadILTry(bc_ILTry* self, bc_Enviroment* env, bc_CallContext* cctx);

void bc_LoadILCatch(bc_ILCatch* self, bc_Enviroment* env, bc_CallContext* cctx);

void bc_DeleteILCatch(bc_ILCatch* self);

void bc_DeleteILTry(bc_ILTry* self);
#endif

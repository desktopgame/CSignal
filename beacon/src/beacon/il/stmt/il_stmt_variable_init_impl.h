//BEGIN-AUTOGENERATED-BLOCK
/**
 * @file il_stmt_variable_init_impl.h
 * @brief ここに概要を記述します
 * @author koya
 * @date 2018/10/31
 */
//END-AUTOGENERATED-BLOCK

#pragma once
#ifndef BEACON_IL_IL_STMT_VARIABLE_INIT_H
#define BEACON_IL_IL_STMT_VARIABLE_INIT_H
#include "../../env/generic_cache.h"
#include "../../util/string_pool.h"
#include "../il_stmt_interface.h"
#include "../il_factor_interface.h"
struct bc_Enviroment;
struct bc_SymbolEntry;
/**
 * 変数の初期化を表す要素.
 */
typedef struct bc_ILVariableInit {
	bc_GenericCache* GCache;
	bc_StringView Name;
	bc_ILFactor* Value;
	struct bc_SymbolEntry* Symbol;
} bc_ILVariableInit;

/**
 * 変数の初期化を表す要素をスーパーセットにラップします.
 * @param self
 * @return
 */
bc_ILStatement* bc_WrapILVariableInit(bc_ILVariableInit* self);

/**
 * 変数の初期化を表す要素を作成します.
 * @param namev
 * @return
 */
bc_ILVariableInit* bc_NewILVariableInit(bc_StringView namev);

/**
 * 変数の初期化を表す要素を出力します.
 * @param depth
 * @param env
 * @param ccctx
 */
void bc_GenerateILVariableInit(bc_ILVariableInit* self, bc_Enviroment* env, bc_CallContext* cctx);

/**
 * 変数の初期化を表す要素を読み込みます.
 * @param self
 * @param env
 * @param cctx
 */
void bc_LoadILVariableInit(bc_ILVariableInit* self, bc_Enviroment* env, bc_CallContext* cctx);

/**
 * 変数の初期化を表す要素を開放します.
 * @param self
 */
void bc_DeleteILVariableInit(bc_ILVariableInit* self);
#endif // !SIGNAL_IL_IL_STMT_VARIABLE_INIT_H

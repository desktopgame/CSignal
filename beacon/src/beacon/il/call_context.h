// BEGIN-AUTOGENERATED-BLOCK
/**
 * @file call_context.h
 * @brief ここに概要を記述します
 * @author koya
 * @date 2018/10/31
 */
// END-AUTOGENERATED-BLOCK

#ifndef BEACON_IL_CALL_CONTEXT_H
#define BEACON_IL_CALL_CONTEXT_H
#include "../util/vector.h"
#include "call_frame.h"
#include "control_structure.h"
struct bc_Namespace;
struct bc_Type;
struct bc_Class;
struct bc_Method;
struct bc_Constructor;
struct bc_OperatorOverload;
struct bc_GenericType;
struct bc_FQCNCache;

typedef enum bc_CallContextTag {
        //プログラムのトップレベル
        CALL_TOP_T,
        //メソッド
        CALL_METHOD_T,
        //コンストラクタ
        CALL_CTOR_T,
        //演算子オーバーロード
        CALL_OPOV_T,
        //コンストラクタの連鎖
        CALL_CTOR_ARGS_T,

        CALL_DECL_T
} bc_CallContextTag;

typedef struct bc_CallContext {
        bc_Vector* CallStack;
        bc_ControlStructure Control;
        bc_CallContextTag Tag;
        struct bc_Namespace* Scope;
        struct bc_Type* Ty;
        union {
                struct bc_Method* Method;
                struct bc_Constructor* Ctor;
                struct bc_OperatorOverload* OpOv;
        } Kind;
} bc_CallContext;

#define bc_NewCallContext(tag) (bc_MallocCContext(tag, __FILE__, __LINE__))
bc_CallContext* bc_MallocCContext(bc_CallFrameTag tag, const char* filename,
                                  int lineno);

bc_CallFrame* bc_PushCallContext(bc_CallContext* self, bc_CallFrameTag tag);

bc_CallFrame* bc_TopCallContext(bc_CallContext* self);

void bc_PopCallContext(bc_CallContext* self);

struct bc_Namespace* bc_GetNamespaceCContext(bc_CallContext* self);

struct bc_Method* bc_GetMethodCContext(bc_CallContext* self);

struct bc_Type* bc_GetTypeCContext(bc_CallContext* self);

struct bc_Class* bc_GetClassCContext(bc_CallContext* self);

struct bc_GenericType* bc_GetReceiverCContext(bc_CallContext* self);

struct bc_Type* bc_GetEvalTypeCContext(bc_CallContext* self,
                                       struct bc_FQCNCache* fqcn);

bc_Vector* bc_GetTypeArgsCContext(bc_CallContext* self);

bool bc_IsStaticCContext(bc_CallContext* self);

void bc_DeleteCallContext(bc_CallContext* self);
#endif
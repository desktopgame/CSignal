@startuml beacon.png
class "namespace_" as namespace_ {
	namespace_vec: tree_map*
	class_vec: tree_map*
}

interface "type_" as type_ {
	name: char*
	absoluteIndex: int
	location: namespace_*
}

class "class_" as class_ {
	parent: type*
}

class "enum_" as enum_ {
	parent: type*
	list: vector*
}

class "interface_" as interface_ {
	parent: type*
}

class "generic_type" as generic_type {
	core_type: type*
	type_args: vector*
}

class "object" as object {
	gtype: generic_type*
}

enum "ast_tag" as ast_tag {
	ast_tag: ast_tag_root
}

class "ast" as ast {
	ast_tag: tag
	union {
		____int ivalue;
		____double dvalue;
		____char* svalue;
	} u;
	list* children;
	int child_count;
}

class "parser" as parser {
	ast*: root
}

class "il_import" as il_import {
	char*: path
}

class "il_namespace" as il_namespace {
	char*: path
	vector*: namespace_list
	vector*: type_list
}

class "il_type" as il_type {
	char*: name
}

class "il_constructor" as il_constructor {
	vector*: parameter_list
}

class "il_method" as il_method {
	char*: name
	generic_cache*: return_type
}

class "il_field" as il_field {
	char*: name
	generic_cache*: type
}

class "il_class" as il_class {
	vector*: extend_list
	vector*: impl_list
	vector*: ctor_list
	vector*: method_list
	vector*: field_list
}

class "il_interface" as il_interface {
	vector*: impl_list
	vector*: method_list
}

class "il_top_level" as il_top_level {
	vector*: import_list
	vector*: namespace_list
}

class "class_loader" as class_loader {
	ast*: root
	il_top_level*: top_level
}

class "heap" as heap {
	vector*: obejcts
	int: threshold
}

class "script_context" as script_context {
	stack*: parser_stack
	tree_map*: namespace_map
	tree_map*: class_loader_map
	vector*: thread_vec
	class_loader*: bootstrap_class_loader
	vector*: type_vec
	heap*: heap
	script_context*: prev
	script_context*: next
}

ast ..> ast_tag : own
ast ..> ast : own
script_context ..> namespace_ : own
script_context ..> type_ : ref
script_context ..> class_loader : own
script_context ..> parser : own
script_context ..> script_context : own
script_context ..> heap : own
heap ..> object : own
parser ..> ast : own
parser ..> class_loader : move [ast]
class_loader ..> il_top_level : own
il_top_level ..> il_import : own
il_top_level ..> il_namespace : own
il_namespace ..> il_type : own
il_namespace ..> il_namespace : own

il_class ..> il_constructor : own
il_class ..> il_field : own
il_class ..> il_method : own
il_interface ..> il_method : own

il_type <|-- il_class
il_type <|-- il_interface

namespace_ ..> type_ : own
namespace_ ..> namespace_ : own

object ..> generic_type : ref
generic_type ..> type_ : ref
generic_type ..> generic_type : ref

type_ <|-- class_
type_ <|-- interface_
type_ <|-- enum_
@enduml
namespace signal.lang {
	class Vector<T> {
		public:
		def push<A, B, C>(Object item) -> Void {
		}

		def pop<E>() -> T {
		}

		def top() -> Void {
		}
	}

	class Dict<K, V> {
	}

	interface Enumerable<in T, out R> {
	}

	interface IList<T> : Iterator {
	}

	interface IComparable<T> {
	}

	interface IFunc {
	}

	class TreeMap<K(IComparable<K, V>), V> {
		public:
		def put<Func(IFunc)>() -> Void {
		}
	}
}
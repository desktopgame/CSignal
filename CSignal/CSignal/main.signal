import "lib"
//import "../io.h"
namespace signal.lang {
	interface ICallable {
		public:
		def call() -> Void;
		def call2() -> Void;
	}

	class ImplA : ICallable {
		public:
		ctor new() {
		}

		def call2() -> Void {
			Console.writeLine("2AAA");
		}

		def call() -> Void {
			Console.writeLine("AAA");
		}
	}
	class ImplB : ICallable {
		public:
		ctor new() {
		}

		def call2() -> Void {
			Console.writeLine("2VBB");
		}

		def call() -> Void {
			Console.writeLine("BBB");
		}
	}
	class ImplX : ImplA {
		public:
		ctor new() : super() {
		}

		def call2() -> Void {
			Console.writeLine("2XXX");
		}
	}
}

def test() -> Void {
	signal::lang::Console.writeLine("Say");
}
def test2() -> Void {
	signal::lang::Console.writeLine("Say");
}

Int i = 0;
while(i < 10) {
	signal::lang::Console.writeLine("Say");
	i = i + 1;
}

signal::lang::ImplA x = new signal::lang::ImplA();
signal::lang::ICallable a = (signal::lang::ICallable)x;


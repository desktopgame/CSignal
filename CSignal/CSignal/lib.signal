namespace signal.lang {
	class Object {
		public:
		ctor new() {
		}

		public:
		def toString() -> String {
			return this.nativeToString();
		}

		private:
		native def nativeToString() -> String;
	}
	
	class Array {
		private:
		Int length;

		public:
		ctor new(Int length) {
			this.length = length;
			nativeInit();
		}

		def length() -> Int {
			return this.length;
		}

		def set(Int index, Object v) -> Void {
			this.checkRange(index);
			this.nativeSet(index, v);
		}

		def get(Int index) -> Object {
			this.checkRange(index);
			return this.nativeGet(index);
		}

		//再帰関数のテスト
		def test(Int a, Int b) -> Int {
			if(b <= 0) {
				return a;
			}
			return this.test(a + b, b - 1);
		}
		
		private:
		def checkRange(Int index) -> Void {
			if(index < 0 || index >= this.length) {
			//	throw new Exception("Out Of Range");
				throw -1;
			}
		}
		native def nativeInit() -> Void;
		native def nativeSet(Int index, Object v) -> Void;
		native def nativeGet(Int index) -> Object;
	}
	class StackTraceElement {
		private:
		String fileName;
		Int lineIndex;

		public:
		ctor new(String fileName, Int lineIndex) {
			this.fileName = fileName;
			this.lineIndex = lineIndex;
		}

		def getFileName() -> String {
			return this.fileName;
		}

		def getLineIndex() -> Int {
			return this.lineIndex;
		}
	}
	class Console {
		public:
		static native def writeLine(String str) -> Void;

		static native def writeLine(Int i) -> Void;

		static native def writeLine(Object i) -> Void;

		static native def write(String str) -> Void;

		static native def read() -> Char;

		static native def readLine() -> String;
	}
	class Exception {
		private:
		String message;
		Array stackTrace;

		public:
		ctor new(String message) {
			this.message = message;
			this.nativeInit();
		}

		ctor new() : this("No Message") {
		}

		def print() -> Void {
		//	Int index = 0;
		//	while(index < this.stackTrace.length()) {
		//		var st = this.stackTrace.get(index);
		//		Console.writeLine(st.getFileName());
		//	//	index = (index + 1);
		//	}
		}

		private:
		native def nativeInit() -> Void;
	}
	class Int {
		public:
		def p() -> Void {
			Console.writeLine("Foo!");
		}

		
	}
}



root
	: top_level
	| root top_level
	| error '\n'
	{
		$$ = ast_new_blank();
	}
	;
top_level
	: stmt_list
	{
		ast_compile_entry($1);
	}
	| import
	{
		ast_compile_entry($1);
	}
	| namespace_decl
	{
		ast_compile_entry($1);
	}
	| function_define
	{
		ast_compile_entry($1);
	}
	;
namespace_decl
	: NAMESPACE namespace_path namespace_body
	{
		$$ = ast_new_namespace_decl($2, $3);
	}
	;
namespace_body
	: LCB namespace_member_decl_optional RCB
	{
		$$ = $2
	}
	;
namespace_member_decl
	: NAMESPACE namespace_path namespace_body
	{
		$$ = ast_new_namespace_namespace_decl($2, $3);
	}
	| class_decl
	{
		$$ = $1;
	}
	| interface_decl
	{
		$$ = $1;
	}
	| enum_decl
	{
		$$ = $1;
	}
	;
namespace_member_decl_list
	: namespace_member_decl
	{
		$$ = $1
	}
	| namespace_member_decl_list namespace_member_decl
	{
		$$ = ast_new_namespace_member_decl_list($1, $2);
	}
	;
namespace_member_decl_optional
	: /* empty */
	{
		$$ = ast_new_blank();
	}
	| namespace_member_decl_list
	{
		$$ = $1
	}
	;
namespace_path
	: IDENT
	{
		$$ = ast_new_namespace_path($1);
	}
	| namespace_path DOT IDENT
	{
		$$ = ast_new_namespace_path_list($1, $3);
	}
	;
import
	: IMPORT STRING_LITERAL
	{
		$$ = ast_new_import_decl(ast_new_import_path($2));
	}
	;
class_decl
	: CLASS IDENT LCB access_member_tree RCB
	{
		$$ = ast_new_class_decl($2, ast_new_blank(), $4);
	}
	| CLASS IDENT COLON typename_list LCB access_member_tree RCB
	{
		$$ = ast_new_class_decl($2, $4, $6);
	}
	;
enum_decl
	: ENUM IDENT LCB ident_list RCB
	{
		$$ = ast_new_enum_decl($2, $4);
	}
	| ENUM IDENT LCB ident_list COMMA RCB
	{
		$$ = ast_new_enum_decl($2, $4);
	}
	;
interface_decl
	: INTERFACE IDENT LCB access_member_tree RCB
	{
		$$ = ast_new_interface_decl($2, ast_new_blank(), $4);
	}
	| INTERFACE IDENT COLON typename_list LCB access_member_tree RCB
	{
		$$ = ast_new_interface_decl($2, $4, $6);
	}
	;
access_member_tree
	: /* empty */
	{
		$$ = ast_new_blank();
	}
	| access_member_list
	{
		$$ = $1;
	}
	| access_member_tree access_member_list
	{
		$$ = ast_new_access_member_tree($1, $2);
	}
	;
access_member_list
	: /* empty */
	{
		$$ = ast_new_blank();
	}
	| access_level_T COLON member_define_list
	{
		$$ = ast_new_access_member_list($1, $3);
	}
	;
member_define_list
	: /* empty */
	{
		$$ = ast_new_blank();
	}
	| member_define
	{
		$$ = ast_new_member_decl($1);
	}
	| member_define_list member_define
	{
		$$ = ast_new_member_decl_list($1, ast_new_member_decl($2));
	}
	;
member_define
	: constructor_define
	| method_define
	| field_define
	;
constructor_define
	: CTOR NEW LRB parameter_list RRB constructor_chain_optional scope_optional
	{
		$$ = ast_new_constructor_decl($4, $6, $7);
	}
	| CTOR NEW LRB RRB constructor_chain_optional scope_optional
	{
		$$ = ast_new_constructor_decl(ast_new_blank(), $5, $6);
	}
	;
constructor_chain
	: COLON constructor_chain_type_T LRB argument_list RRB
	{
		$$ = ast_new_constructor_chain($2, $4);
	}
	| COLON constructor_chain_type_T LRB RRB
	{
		$$ = ast_new_constructor_chain($2, ast_new_blank());
	}
	;
constructor_chain_type_T
	: SUPER
	{
		$$ = chain_type_super;
	}
	| THIS
	{
		$$ = chain_type_this;
	}
	;
constructor_chain_optional
	: /* empty */
	{
		$$ = ast_new_blank();
	}
	| constructor_chain
	;
function_define
	: DEF IDENT LRB parameter_list RRB ARROW typename_T scope_optional
	{
		$$ = ast_new_function_decl($2, $4, $8, $7);
	}
	| DEF IDENT LRB RRB ARROW typename_T scope_optional
	{
		$$ = ast_new_function_decl_empty_params($2, $7, $6);
	}
	;
method_define
	: modifier_type_T DEF IDENT LRB parameter_list RRB ARROW typename_T scope_optional
	{
		$$ = ast_new_method_decl($1, $3, $5, $9, $8);
	}
	| modifier_type_T DEF IDENT LRB RRB ARROW typename_T scope_optional
	{
		$$ = ast_new_method_decl_empty_params($1, $3, $8, $7);
	}
	;
field_define
	: modifier_type_T typename_T IDENT SEMI
	{
		$$ = ast_new_field_decl($1, $2, $3);
	}
	;
modifier_type_T
	: /* empty */
	{
		$$ = modifier_none;
	}
	| STATIC NATIVE
	{
		$$ = modifier_static_native();
	}
	| NATIVE STATIC
	{
		$$ = modifier_static_native();
	}
	| STATIC
	{
		$$ = modifier_static;
	}
	| NATIVE
	{
		$$ = modifier_native;
	}
	;
access_level_T
	: PUBLIC
	{
		$$ = access_public;
	}
	| PRIVATE
	{
		$$ = access_private;
	}
	| PROTECTED
	{
		$$ = access_protected;
	}
	;
ident_list
	: IDENT
	{
		$$ = ast_new_identifier($1);
	}
	| IDENT COMMA ident_list
	{
		$$ = ast_new_identifier_list($1, $3);
	}
	;
parameter_list
	: typename_T IDENT
	{
		$$ = ast_new_parameter($1, $2);
	}
	| typename_T IDENT COMMA parameter_list
	{
		$$ = ast_new_parameter_list($1, $2, $4)
	}
	;
argument_list
	: expression
	{
		$$ = ast_new_argument($1);
	}
	| expression COMMA argument_list
	{
		$$ = ast_new_argument_list(ast_new_argument($1), $3);
	}
	;
typename_list
	: typename_T
	{
		$$ = $1;
	}
	| typename_T COMMA typename_list
	{
		$$ = ast_new_typename_list($1, $3);
	}
	;
typename_T
	: fqcn_part
	{
		$$ = ast_new_typename($1);
	}
	;
fqcn_part
	: IDENT
	{
		$$ = ast_new_fqcn_part($1);
	}
	| IDENT COLO_COLO fqcn_part
	{
		$$ = ast_new_fqcn_part_list(ast_new_fqcn_part($1), $3);
	}
	;
;;‚±‚±‚Éfactor
;;‚±‚±‚Éstmt


import "Exception"
import "String"
import "Iterable"
import "ArrayIterator"

namespace signal.lang {
	/**
	 * 配列を表現するクラスです.
	 * 要素は signal::lang::Object で扱われます。
	 */
	class Array : Iterable {
		private:
		Int length;

		public:
		ctor new(Int length) {
			this.length = length;
			this.nativeInit();
		}

		def length() -> Int {
			return this.length;
		}

		def set(Int index, Object v) -> Void {
			this.checkRange(index);
			this.nativeSet(index, v);
		}

		def sub(Int offs, Int len) -> Array {
			var range = new Array(len);
			var ptr = offs;

			while(ptr < offs + len) {
				var a = ptr-offs;
				range.set(a, this.get(ptr));
				ptr++;
			}
			return range;
		}

		def get(Int index) -> Object {
			this.checkRange(index);
			return this.nativeGet(index);
		}

		static def copy(Array src, Int srcOffset, Array dst, Int dstOffset, Int length) -> Void {
			Array.nativeCopy(src, srcOffset, dst, dstOffset, length);
		}

		//再帰関数のテスト
		def test(Int a, Int b) -> Int {
			if(b <= 0) {
				return a;
			}
			return this.test(a + b, b - 1);
		}

		def iterate() -> Iterator {
			return new ArrayIterator(this)
		}
		
		private:
		def checkRange(Int index) -> Void {
			if(index < 0 || index >= this.length()) {
				throw new Exception("Out Of Range");
			//	throw -1;
			}
		}
		native def nativeInit() -> Void;
		native def nativeSet(Int index, Object v) -> Void;
		native def nativeGet(Int index) -> Object;
		static native def nativeCopy(Array src, Int srcOffset, Array dst, Int dstOffset, Int length) -> Void;
	}
}
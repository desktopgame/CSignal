// BEGIN-AUTOGENERATED-BLOCK
/**
 * @file parameter.h
 * @brief パラメータを定義します。
 * @author koya
 * @date 2018/10/31
 */
// END-AUTOGENERATED-BLOCK

#pragma once
#ifndef BEACON_ENV_PARAMETER_H
#define BEACON_ENV_PARAMETER_H
#include "../util/string_pool.h"
#include "../util/vector.h"
//#include "virtual_type.h"
/**
 * メソッドの仮引数を表す構造体です.
 */
typedef struct bc_Parameter {
        bc_StringView Name;
        struct bc_GenericType* GType;
} bc_Parameter;

/**
 * 新しいパラメータを作成します.
 * @param namev
 * @return
 */
bc_Parameter* bc_NewParameter(bc_StringView namev);

/**
 * パラメータを開放します.
 * @param self
 */
void bc_DeleteParameter(bc_Parameter* self);

/**
 * 重複するパラメータ名が存在するなら true.
 * @param parameters
 * @param outName
 * @return
 */
bool bc_IsOverwrappedParameterName(bc_Vector* parameters,
                                   bc_StringView* outName);
#endif  // !SIGNAL_ENV_PARAMETER_H

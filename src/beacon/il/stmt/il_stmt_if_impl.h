// BEGIN-AUTOGENERATED-BLOCK
/**
 * @file il_stmt_if_impl.h
 * @brief ここに概要を記述します
 * @author koya
 * @date 2018/10/31
 */
// END-AUTOGENERATED-BLOCK

#pragma once
#ifndef BEACON_IL_IL_STMT_IF_IMPL_H
#define BEACON_IL_IL_STMT_IF_IMPL_H
#include "../../util/vector.h"
#include "../il_factor_interface.h"
#include "../il_stmt_interface.h"
/**
 * elif (...) { ... } を表す要素.
 */
typedef struct bc_ILElif {
        bc_ILFactor* Condition;
        bc_Vector* Body;
} bc_ILElif;

/**
 * } else { ... } を表す要素.
 */
typedef struct bc_ILElse {
        bc_Vector* Body;
} bc_ILElse;

/**
 * if (...) {
 *    ...
 * }
 * を表す要素.
 */
typedef struct bc_ILIf {
        bc_ILFactor* Condition;
        bc_Vector* Body;
        bc_Vector* ElifList;
        bc_ILElse* Else;
} bc_ILIf;

/**
 * if をスーパーセットにラップします.
 * @param self
 * @return
 */
bc_ILStatement* bc_WrapILIf(bc_ILIf* self);

/**
 * if を表す要素を作成します.
 * @return
 */
bc_ILIf* bc_NewILIf();

/**
 * elif を表す要素を作成します.
 * @return
 */
bc_ILElif* bc_NewILElif();

/**
 * elif の一覧を表す要素を作成します.
 * @return
 */
bc_Vector* bc_NewILElifList();

/**
 * else を表す要素を作成します.
 * @return
 */
bc_ILElse* bc_NewILElse();

/**
 * elif を一覧に加えます.
 */
void bc_PushILElifList(bc_Vector* self, bc_ILElif* child);

/**
 * if とその子要素を生成します.
 * @param self
 * @param env
 * @param cctx
 */
void bc_GenerateILIf(bc_ILIf* self, bc_Enviroment* env, bc_CallContext* cctx);

/**
 * if とその子要素を読み込みます.
 * @param self
 * @param env
 * @param cctx
 */
void bc_LoadILIf(bc_ILIf* self, bc_Enviroment* env, bc_CallContext* cctx);

/**
 * if を表す要素を開放します.
 * @param self
 */
void bc_DeleteILIf(bc_ILIf* self);

/**
 * elif を表す要素を開放します.
 * @param self
 */
void bc_DeleteILElif(bc_ILElif* self);

/**
 * elifの一覧 を表す要素を開放します.
 * @param self
 */
void bc_DeleteILElifList(bc_Vector* self);

/**
 * else を表す要素を開放します.
 * @param self
 */
void bc_DeleteILElse(bc_ILElse* self);
#endif  // !SIGNAL_IL_IL_STMT_IF_IMPL_H

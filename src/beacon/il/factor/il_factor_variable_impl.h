// BEGIN-AUTOGENERATED-BLOCK
/**
 * @file il_factor_variable_impl.h
 * @brief ここに概要を記述します
 * @author koya
 * @date 2018/10/31
 */
// END-AUTOGENERATED-BLOCK

#pragma once
#ifndef BEACON_IL_IL_FACTOR_VARIABLE_H
#define BEACON_IL_IL_FACTOR_VARIABLE_H
#include <stdbool.h>
#include "../../env/fqcn_cache.h"
#include "../../env/generic_type.h"
#include "../../util/vector.h"
#include "../il_factor_interface.h"
#include "variable/il_factor_variable_local_impl.h"
#include "variable/il_factor_variable_static_impl.h"

// struct opcode_buf;
struct bc_GenericType;
struct bc_Field;

/**
 * 変数の種類を判別する列挙.
 * beaconの構文定義では、次のものは全て一度 il_Variable として変換されます。
 * <code>
 * variable Namespace::Class variable<|T|> Namespace::Class<|T|>
 * </code>
 */
typedef enum bc_ILVariableType {
        ILVARIABLE_TYPE_LOCAL_T,
        ILVARIABLE_TYPE_STATIC_T,
        ILVARIABLE_TYPE_UNDEFINED_T
} bc_ILVariableType;

/**
 * 変数を表す要素.
 */
typedef struct bc_ILVariable {
        bc_FQCNCache* FQCN;
        bc_Vector* TypeArgs;
        int Index;
        bc_ILVariableType Type;
        union {
                bc_ILVariableLocal* Local;
                bc_ILVariableStatic* Static;
        } Kind;
} bc_ILVariable;

bc_ILFactor* bc_WrapILVariable(bc_ILVariable* self);

#define bc_NewILVariable() (bc_MallocILVariable(__FILE__, __LINE__))
bc_ILVariable* bc_MallocILVariable(const char* filename, int lineno);

void bc_GenerateILVariable(bc_ILVariable* self, bc_Enviroment* env,
                           bc_CallContext* cctx);

void bc_LoadILVariable(bc_ILVariable* self, bc_Enviroment* env,
                       bc_CallContext* cctx);

bc_GenericType* bc_EvalILVariable(bc_ILVariable* self, bc_Enviroment* env,
                                  bc_CallContext* cctx);

char* bc_ILVariableToString(bc_ILVariable* self, bc_Enviroment* env);

void bc_DeleteILVariable(bc_ILVariable* self);

#endif  // !SIGNAL_IL_IL_FACTOR_VARIABLE_H

// BEGIN-AUTOGENERATED-BLOCK
/**
 * @file il_factor_variable_local_impl.h
 * @brief ここに概要を記述します
 * @author koya
 * @date 2018/10/31
 */
// END-AUTOGENERATED-BLOCK

#ifndef BEACON_IL_IL_FACTOR_VARIABLE_LOCAL_H
#define BEACON_IL_IL_FACTOR_VARIABLE_LOCAL_H
#include "../../../util/string_pool.h"
#include "../../../util/vector.h"
#include "../../il_factor_interface.h"
struct bc_SymbolEntry;
struct bc_Enviroment;
struct bc_GenericType;
struct bc_Field;
struct bc_Property;

typedef enum bc_VariableLocalType {
        VARIABLE_LOCAL_SCOPE_T,
        VARIABLE_LOCAL_FIELD_T,
        VARIABLE_LOCAL_PROPERTY_T,
        VARIABLE_LOCAL_UNDEFINED_T,
} bc_VariableLocalType;

typedef struct bc_FieldWithIndex {
        struct bc_Field* Field;
        int Index;
} bc_FieldWithIndex;

typedef struct bc_PropertyWithIndex {
        struct bc_Property* Property;
        int Index;
} bc_PropertyWithIndex;

/**
 * ローカル変数を表す構造体.
 */
typedef struct bc_ILVariableLocal {
        bc_StringView Name;
        bc_VariableLocalType Type;
        struct bc_GenericType* GType;
        union {
                struct bc_SymbolEntry* Entry;
                bc_FieldWithIndex FieldI;
                bc_PropertyWithIndex PropertyI;
        } Kind;
        bc_Vector* TypeArgs;
} bc_ILVariableLocal;

bc_ILVariableLocal* bc_NewILVariableLocal(bc_StringView namev);

void bc_GenerateILVariableLocal(bc_ILVariableLocal* self, bc_Enviroment* env,
                                bc_CallContext* cctx);

void bc_LoadILVariableLocal(bc_ILVariableLocal* self, bc_Enviroment* env,
                            bc_CallContext* cctx);

struct bc_GenericType* bc_EvalILVariableLocal(bc_ILVariableLocal* self,
                                              bc_Enviroment* env,
                                              bc_CallContext* cctx);

char* bc_ILVariableLocalToString(bc_ILVariableLocal* self, bc_Enviroment* env);

void bc_DeleteILVariableLocal(bc_ILVariableLocal* self);
#endif
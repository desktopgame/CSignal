// BEGIN-AUTOGENERATED-BLOCK
/**
 * @file il_factor_short_impl.h
 * @brief ここに概要を記述します
 * @author koya
 * @date 2018/10/31
 */
// END-AUTOGENERATED-BLOCK

#pragma once
#ifndef BEACON_IL_IL_FACTOR_SHORT_H
#define BEACON_IL_IL_FACTOR_SHORT_H
#include <stdint.h>
#include "../il_factor_interface.h"
// struct opcode_buf;

/**
 * 整数リテラルを表す要素.
 */
typedef struct bc_ILShort {
        short Value;
        int Count;
} bc_ILShort;

bc_ILFactor* bc_WrapILShort(bc_ILShort* self);

#define bc_NewILShort(i) (bc_MallocILShort(i, __FILE__, __LINE__))
bc_ILShort* bc_MallocILShort(short s, const char* filename, int lineno);

void bc_GenerateILShort(bc_ILShort* self, bc_Enviroment* env,
                        bc_CallContext* cctx);

void bc_LoadILShort(bc_ILShort* self, bc_Enviroment* env, bc_CallContext* cctx);

bc_GenericType* bc_EvalILShort(bc_ILShort* self, bc_Enviroment* env,
                               bc_CallContext* cctx);

char* bc_ILShortToString(bc_ILShort* self, bc_Enviroment* env);

void bc_DeleteILShort(bc_ILShort* self);

#endif  // !SIGNAL_IL_IL_FACTOR_INT_H

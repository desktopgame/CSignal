// BEGIN-AUTOGENERATED-BLOCK
/**
 * @file tree_map.h
 * @brief 文字列をキーとする二分探索木です。
 * @author koya
 * @date 2018/10/31
 */
// END-AUTOGENERATED-BLOCK

#pragma once
#ifndef BEACON_UTIL_TREE_MAP_H
#define BEACON_UTIL_TREE_MAP_H
/**
 * ツリーマップに格納可能なキーの型.
 */
typedef const char* bc_TreeKey;

/**
 * ツリーマップに格納可能な値の型.
 */
typedef void* bc_TreeItem;

/**
 * キーと値を紐づけて管理するマップ.
 */
typedef struct bc_TreeMap {
        char* Key;
        bc_TreeItem Item;
        // struct TreeMap* parent;
        struct bc_TreeMap* Parent;
        struct bc_TreeMap* Left;
        struct bc_TreeMap* Right;
} bc_TreeMap;

/**
 * ツリーのアクション関数です.
 * @param item
 */
typedef void (*bc_TreeAction)(const char* name, bc_TreeItem item);

/**
 * ツリーのデリータ関数です.
 * @param item
 */
typedef void (*bc_TreeElementDeleter)(const char* name, bc_TreeItem item);

/**
 * 新しいツリーマップを作成します.
 * @return
 */
bc_TreeMap* bc_NewTreeMap();

/**
 * 指定のツリーマップで指定のキーと値を紐づけます.
 * @param self
 * @param key
 * @param item
 */
bc_TreeMap* bc_PutTreeMap(bc_TreeMap* self, bc_TreeKey key, bc_TreeItem item);

/**
 * 指定のツリーマップで指定のキーに紐づけられた値を返します.
 * @param self
 * @param key
 * @return
 */
bc_TreeItem bc_GetTreeMapValue(bc_TreeMap* self, bc_TreeKey key);

/**
 * 要素を格納しているセルを返します.
 * @param self
 * @param key
 * @return
 */
bc_TreeMap* bc_GetTreeMapCell(bc_TreeMap* self, bc_TreeKey key);

/**
 * ツリーのキーと引数のキーを比較します.
 * @param self
 * @param key
 * @return
 */
int bc_CompareTreeMap(bc_TreeMap* self, bc_TreeKey key);

/**
 * ツリー内のすべての要素を訪問します.
 * @param self
 * @param act
 */
void bc_EachTreeMap(bc_TreeMap* self, bc_TreeAction act);

/**
 * ツリーと全ての要素を削除します.
 * @param self
 * @param deleter
 */
void bc_DeleteTreeMap(bc_TreeMap* self, bc_TreeElementDeleter deleter);

/**
 * freeによって解放するデリータの実装です.
 * @param item
 */
void bc_TreeMapDeleterByFree(const char* key, bc_TreeItem item);

/**
 * 何も行わないデリータの実装です.
 * @param item
 */
void bc_TreeMapDeleterOfNull(const char* key, bc_TreeItem item);
#endif  // !SIGNAL_UTIL_TREE_MAP_H

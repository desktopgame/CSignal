// BEGIN-AUTOGENERATED-BLOCK
/**
 * @file vector.h
 * @brief 可変長配列を定義します。
 * @author koya
 * @date 2018/10/31
 */
// END-AUTOGENERATED-BLOCK

#pragma once
#ifndef BEACON_UTIL_VECTOR_H
#define BEACON_UTIL_VECTOR_H
#include <stdbool.h>
#include <stdlib.h>

/**
 * ベクターの要素を表す型.
 */
typedef void* bc_VectorItem;

/**
 * 再帰を使用せずに実装された可変長配列です.
 * 0/NULLを格納することが出来ます。
 */
typedef struct bc_Vector {
        //使用されている長さ
        int Length;
        //余分に確保された分も含めた長さ
        int Capacity;
        //要素一つ分のサイズ
        // vector_slot_size_t slotSize;
        bc_VectorItem* Memory;
} bc_Vector;

/**
 * ベクターのデリータ関数です.
 * @param item
 */
typedef void (*bc_VectorElementDeleter)(bc_VectorItem item);

typedef void (*bc_VectorAction)(bc_VectorItem item);

/**
 * ベクターを作成します.
 */
#define bc_NewVector() (bc_MallocVector(__FILE__, __LINE__))

/**
 * ベクターを作成します.
 * @param filename
 * @param lineno
 */
bc_Vector* bc_MallocVector(const char* filename, int lineno);

/**
 * 末尾に要素を追加します.
 * @param self
 * @param item
 */
void bc_PushVector(bc_Vector* self, bc_VectorItem item);

/**
 * 末尾の要素を削除せずに返します.
 * @param self
 * @return
 */
bc_VectorItem bc_TopVector(bc_Vector* self);

/**
 * 末尾の要素を削除して返します.
 * @param self
 * @return
 */
bc_VectorItem bc_PopVector(bc_Vector* self);

/**
 * 指定位置の要素を削除します.
 * @param self
 * @param index
 */
bc_VectorItem bc_RemoveVector(bc_Vector* self, int index);

/**
 * 容量を拡張します.
 * @param self
 * @return 新しいキャパシティサイズ
 */
int bc_ReserveVector(bc_Vector* self);

/**
 * 指定位置の要素を上書きします.
 * 長さが足りない場合は 0 で伸ばします。
 * @param self
 * @param index
 * @param item
 */
void bc_AssignVector(bc_Vector* self, int index, bc_VectorItem item);

/**
 * 指定位置の要素を返します.
 * @param self
 * @param index
 * @return
 */
bc_VectorItem bc_AtVector(bc_Vector* self, int index);

/**
 * 空なら true.
 * @param self
 * @return
 */
bool bc_IsEmptyVector(bc_Vector* self);

/**
 * 先頭から検索して一致するものがあるなら添え字を返します.
 * @param self
 * @param item
 * @return 見つからなければ -1
 */
int bc_FindVector(bc_Vector* self, bc_VectorItem item);

/**
 * 中身を空にします.
 * @param self
 */
void bc_ClearVector(bc_Vector* self);

/**
 * ベクターを開放します.
 * @param self
 * @param deleter
 */
void bc_DeleteVector(bc_Vector* self, bc_VectorElementDeleter deleter);

/**
 * free によって解放するデリータ.
 * @param item
 */
void bc_VectorDeleterByFree(bc_VectorItem item);

/**
 * 何も行わないデリータ.
 * @param item
 */
void bc_VectorDeleterOfNull(bc_VectorItem item);

/**
 * @param source
 * @return
 */
bc_Vector* bc_CloneVector(bc_Vector* source);

/**
 * srcからdestへコピーします.
 * @param src
 * @param dest
 */
void bc_CopyVector(bc_Vector* src, bc_Vector* dst);

/**
 * @param src
 * @param dst
 */
void bc_MergeVector(bc_Vector* src, bc_Vector* dst);

/**
 * 指定位置に値を挿入します.
 * indexから末尾までの要素を一つ右にシフトします。
 * 次に index を item で上書きします。
 * @param self
 * @param index
 * @param item
 */
void bc_InsertVector(bc_Vector* self, int index, bc_VectorItem item);

#endif  // !SIGNAL_UTIL_VECTOR_H
